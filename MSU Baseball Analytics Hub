library(tidyverse)
library(shiny)
library(shinymanager)
library(dplyr)
library(ggplot2)
library(ggiraph)
library(broom)
library(DT)
library(gridExtra)
library(png)
library(bslib)
library(shinythemes)
library(fresh)
library(shinyscreenshot)
library(devtools)
library(capture)
library(capture)
library(shinyjs)
library(shinytitle)
library(plotly)
library(shinycssloaders)
library(shinyjs)
library(plotly)
library(sportyR)
library(zoo)
library(ggridges)
library(reactable)
library(caret)
library(gmailr)
library(webshot2) 
# Reference for some code
# https://sambornstein.shinyapps.io/Simple_Sabermetrics_Post_Game_Report/


# Loading in Data
master <- read.csv("Master_data.csv", header = TRUE)
sd_data <- read.csv("Master_data.csv", header = TRUE)



batting_scrimmage_stats = read.csv("Batting_Scrimmage_Stats.csv", header = TRUE)
pitching_scrimmage_stats = read.csv("Pitching_Scrimmage_Stats.csv", header = TRUE)

# Loading in Mound png
# path <- "/Users/joshuawolf/Downloads/MSU Baseball/Spartan Savant/Testing/Mound_Front.png"
mound <- readPNG("www/Mound_Front.png", native = TRUE)

msu_font = "www/NCAA Michigan St Spartans.otf"


# Data Manipulation
master$Date = as.Date(master$Date, format = "%m/%d/%y")

# Strike-zone check 
master$strikezone <- ifelse((master$PlateLocHeight >= 1.378) & (master$PlateLocHeight <= 3.622) &
                              (master$PlateLocSide >= -.83) & (master$PlateLocSide <= .83), 1, 0)

# Whiff check
master$whiff <- ifelse((master$PitchCall == 'StrikeSwinging'), 1, 0)
master$whiff <- as.factor(master$whiff)

# Swinging check
master$swinging = ifelse((master$PitchCall == 'StrikeSwinging') |(master$PitchCall == 'FoulBall') |
                           (master$PitchCall == 'InPlay'),1,0)


# Colors to use for pitches (plots with color)
pitch_colors <- scale_colour_manual(values = c("Fastball" = "red",
                                               "Curveball" = "navy",
                                               "ChangeUp" = "orchid",
                                               'Splitter' = 'lightblue',
                                               "Slider" = "orange",
                                               "Sinker" = "darkgreen",
                                               "Cutter" = "brown"))
# Colors to use for pitches (plots with fill)
pitch_colors_fill <- scale_fill_manual(values = c("Fastball" = "red",
                                                  "Curveball" = "navy",
                                                  "ChangeUp" = "orchid",
                                                  'Splitter' = 'lightblue',
                                                  
                                                  "Slider" = "orange",
                                                  "Sinker" = "darkgreen",
                                                  "Cutter" = "brown"))

# Umpire report colors
umpire_colors <- scale_colour_manual(values = c("StrikeCalled" = "red", 'BallCalled' = 'green4'))
ball_accuracy_colors <- scale_fill_manual(values = c("0" = "green4", "1" = 'white'))
strike_accuracy_colors <- scale_fill_manual(values = c("0" = "white", "1" = 'red'))

# List of MSU Pitchers
msu_pitchers = c("Addari, Michael", "Arbaugh, Aidan", "Berghorst, Adam", "Carson, Andrew", "Chapman, Max",
                 "Cook, Harrison", "Dzierwa, Joseph", "Farquhar, Tate", "Higgins, Nolan", "Hopman, Zach",
                 "Klann, Robert", "Kok, Caden", "Martin, Brian", "Matheny, Noah", "Pianto, Dominic",
                 "Powers, Nick", "Ruhle, Stephen", "Rush, Wyatt", "Seymour, Randy", 
                 "Sitarz, Gavin", "Szczepaniak, Ryan",
                 "Szczepanski, Tommy", "Brewer, Garrett", "Huffman, Jaxon", "Grundman, Gannon", "Moczydlowsky, Gavin", "Mishoulam, Aaron", "Kaminski, Dylan", "Falish, Quinn", "Jones, Jack", "Bassett-Kennedy, Sam",
                 "Long, Hunter", 'Ferazzi, Nick', 'Pikur, Logan', 'Sturgess, Isaac','Donovan, Aidan','Horvath, Tyler', 'Crow, Kyle', 'Viebrook, George', 'Custer, Carson','Liss, Jordan', 'Agar, Jeff', 'Chambers, Brady','Maxey, Zach','Zimmer, Ryan', 'Klug, Josh','Agosta, Branden','Fidelino, Nathan')

# List of MSU Batters
msu_batters = c("Anderson, Jacob", "Broecker, Bryan", "Busch, Sam", "Dresselhouse, Jacob",
                "Farquhar, Trent", "Frank, Jack", "Jebb, Mitchell", "Kark, Dillon",
                "Malcom, John", "Mayes, Casey", "Seymour, Randy", "Terres, Jayden",
                "Thompson, Sam", "Vradenburg, Brock", "Williams, Christian", "Ziegler, Greg")

msu_batters_wasi = c("Jacob Anderson", "Bryan Broecker", "Sam Busch", "Jake Dresselhouse",
                     "Trent Farquhar", "Jack Frank", "Mitch Jebb", "Dillon Kark", "John Malcom",
                     "Casey Mayes", "Randy Seymour", "Jayden Terres", "Sam Thompson",
                     "Brock Vradenburg", "Christian Williams", "Greg Ziegler")



# Testing a theme (not currenty using)
# msu_theme <- create_theme(
#   theme = "default",
#   bs_vars_navbar(
#     default_bg = "white",
#     default_color = "#173F35",
#     default_link_color = "#173F35",
#     default_link_active_color = "#696158",
#     default_link_active_bg = "#696158",
#     default_link_hover_color = "#696158"
#   ),
#   output_file = NULL
# )


# Theme
authentication_theme <- HTML(".btn-primary {
                  color: #ffffff;
                  background-color: #173F35;
                  border-color: #173F35; }
                  .panel-primary {
                  border-color: #173F35; }
                  .btn:hover {
                  background-color: #696158;
                  border-color: #173F35
                  }
                          ")


# Changing incorrect pitch tags
master <- master %>%
  mutate(Date = case_when(
    Date == as.Date("2024-12-02") ~ as.Date("2023-12-02"),
    TRUE ~ Date)) %>%
  filter(!(Date == as.Date("2024-05-18") & Batter == "McKay, Ryan")) %>%
  mutate(
    TaggedPitchType = case_when(
      Pitcher == 'Powers, Nick' & TaggedPitchType == 'Slider' ~ 'Curveball',
      Pitcher == 'Rush, Wyatt' & TaggedPitchType == 'Slider' ~ 'Cutter',
      Pitcher == 'Dzierwa, Joseph' & TaggedPitchType == 'Curveball' ~ 'Slider',
      Pitcher == 'Cook, Harrison' & TaggedPitchType == 'Fastball' ~ 'Sinker',
      Pitcher == 'Szczepaniak, Ryan' & TaggedPitchType == 'Slider' ~ 'Curveball',
      Pitcher == 'Farquhar, Tate' & TaggedPitchType == 'Curveball' ~ 'Slider',
      Pitcher == 'Hopman, Zach' & TaggedPitchType == 'Sinker' ~ 'Fastball',
      Pitcher == 'Chapman, Max' & TaggedPitchType == 'Curveball' ~ 'Slider',
      Pitcher == 'Rush, Wyatt' & TaggedPitchType == 'Fastball' ~ 'Sinker',
      Pitcher == 'Rush, Wyatt' & TaggedPitchType == 'Slider' ~ 'Cutter',
      Pitcher == 'Carson, Andrew' & TaggedPitchType == 'Curveball' ~ 'Slider',
      Pitcher == 'Pianto, Dominic' & TaggedPitchType == 'Fastball' ~ 'Sinker',
      Pitcher == 'Mishoulam, Aaron' & TaggedPitchType == 'Fastball' ~ 'Sinker',
      Pitcher == 'Kaminski, Dylan' & TaggedPitchType == 'Changeup' ~ 'Splitter',
      Pitcher == 'Zimmer, Ryan' & TaggedPitchType == 'Changeup' ~ 'Splitter',
      TRUE ~ TaggedPitchType),
    # Setting up season dates (random dates in middle of season are practice scrimmages)
    Season = case_when(
      (Date < '2023-02-17' | Date == '2023-02-28' | Date == '2023-03-01' | Date == '2023-03-23' | Date == '2023-04-27') ~ "2023 - SCRIMMAGES",
      (Date >= '2023-02-17' & Date <= '2023-08-01') ~ "2023 - SEASON",
      (Date >= '2023-09-10' & Date <= '2024-02-15'|Date == '2023-12-02'| Date == '2023-10-02') ~ "2024 - SCRIMMAGES",
      (Date >= '2024-02-16' & Date <= '2024-08-01') ~ '2024 - SEASON',
      (Date >= '2024-08-20' & Date <= '2024-09-07') ~ '2025 - PENS',
      (Date >= '2024-09-08' & Date <= '2025-02-13') ~ "2025 - SCRIMMAGES",
      (Date >= '2025-02-14' & Date <= '2025-08-01') ~ '2025 - SEASON'),
    Year = case_when(
      (Date >= '2022-09-01' & Date < '2023-08-01') ~ '2023',
      (Date >= '2023-09-01' & Date < '2024-08-01') ~ '2024',
      (Date >= '2024-09-01' & Date < '2025-08-01') ~ '2025',
    ))



## wASI table data manipulation from TruMedia Export ##
fn_wasi <- function(x) {
  (as.numeric(sub("+", "", x)))
  return (as.numeric(sub("%", "", x)))
}

wasi = read.csv("wasi_stats.csv", header = TRUE)
### Excel cleaning: 
# - Make sure to export from "Roster" tab in TruMedia
# - Delete "Chase#" column
# - Add HH% from google sheets
wasi = wasi %>%
  mutate(playerFullName = ifelse((wasi$playerId == 'TOTAL'), 'TOTAL', wasi$playerFullName)) %>%
  select(playerFullName, G, AB, PA, QAB., BA, OBP, SLG, OPS, xWOBA, WOBA, XBH, Hit90.., BB., K., Miss., Chase., SWING., SSE.)

wasi_team = wasi %>%
  filter(playerFullName == 'TOTAL') %>%
  rename(Name = playerFullName,
         `BB%` = BB.,
         `K%` = K.,
         `HH%` = Hit90..,
         `Miss%` = Miss.,
         `Chase%` = Chase.,
         `QAB%` = QAB.,
         `SWING+` = SWING.,
         `SSE+` = SSE.) %>%
  mutate_at(c('QAB%', 'HH%', 'BB%', 'K%', 'Miss%', 'Chase%'), fn_wasi) %>%
  mutate_at(c('G', 'AB', 'BA', 'OBP', 'SLG', 'XBH', 'PA', 'WOBA', 'xWOBA', 'OPS'), as.numeric)


wasi_players  = wasi %>%
  rename(Name = playerFullName) %>%
  filter(Name %in% msu_batters_wasi) %>%
  rename(`BB%` = BB.,
         `K%` = K.,
         `HH%` = Hit90..,
         `Miss%` = Miss.,
         `Chase%` = Chase.,
         `QAB%` = QAB.,
         `SWING+` = SWING.,
         `SSE+` = SSE.) %>%
  mutate_at(c('QAB%', 'HH%', 'BB%', 'K%', 'Miss%', 'Chase%', 'SWING+', 'SSE+'), fn_wasi) %>%
  mutate(R.WOBA = rank(desc(WOBA), ties.method = 'min'),
         `R.HH%` = rank(desc(`HH%`), ties.method = 'min'),
         R.OPS = rank(desc(OPS), ties.method = 'min'),
         `R.Chase%` = rank(`Chase%`, ties.method = 'min'),
         `R.QAB%` = rank(desc(`QAB%`), ties.method = 'min'),
         ASI = (R.WOBA + `R.HH%` + R.OPS + `R.Chase%` + `R.QAB%`)/5,
         R.ASI = rank(ASI, ties.method = 'min'),
         wASI = ((R.WOBA*1.5) + (`R.HH%`*1.25) + (R.OPS*0.5) + (`R.Chase%`*1.25) + (`R.QAB%`*.5))/5,
         R.wASI = rank(wASI, ties.method = 'min')) %>%
  mutate_at(c('G', 'AB', 'BA', 'OBP', 'SLG', 'XBH', 'PA', 'WOBA', 'xWOBA', 'OPS'), as.numeric) %>%
  relocate(R.WOBA, .after = WOBA) %>%
  relocate(`R.HH%`, .after = `HH%`) %>%
  relocate(R.OPS, .after = OPS) %>%
  relocate(`R.Chase%`, .after = `Chase%`) %>%
  relocate(`R.QAB%`, .after = `QAB%`) %>%
  arrange(R.wASI)


blast = read.csv("BlastMaster.csv", header = TRUE)
blast$Date = as.Date(blast$Date, format = "%m/%d/%y")





###SD####
counts <- c("0-0", "0-0","0-0","0-0","0-0","0-1","0-1","0-1","0-1","0-1", "0-2","0-2","0-2","0-2","0-2", "1-0","1-0","1-0","1-0","1-0", "1-1","1-1","1-1","1-1","1-1", "1-2","1-2","1-2","1-2","1-2", "2-0","2-0","2-0","2-0","2-0", "2-1","2-1","2-1","2-1","2-1", "2-2","2-2","2-2","2-2","2-2", "3-0","3-0","3-0","3-0","3-0", "3-1","3-1","3-1","3-1","3-1", "3-2","3-2","3-2","3-2","3-2")

zones <- c('Waste','Heart','Zone','Shadow','Chase','Waste','Heart','Zone','Shadow','Chase','Heart','Zone','Shadow','Chase','Waste','Waste','Heart','Zone','Shadow','Chase','Waste','Heart','Zone','Shadow','Chase','Heart','Zone','Shadow','Waste','Chase','Waste','Heart','Zone','Shadow','Chase','Waste','Heart','Zone','Shadow','Chase','Heart','Zone','Shadow','Waste','Chase','Waste','Chase','Shadow','Zone','Heart','Waste','Chase','Shadow','Zone','Heart','Waste','Chase','Heart','Zone','Shadow')

swing_score <- c(-5,5,4,0,-2,-5,5,3.5,0,-2,5,4.5,1.5,-1,-5,-5,5,4,1.5,-2.5,-5,5,4,0.5,-2,5,4.5,1.5,-5,-1,-5,5,4.5,2.5,-3,-5,5,4.5,1.5,-1.5,5,4.5,1.5,-5,-2,-5,-4,-3,0,0.5,-5,-3,1,5,5,-5,-2.5,5,4.5,0.5)


take_score <- c(1,-4.5,-4,1,1,1,-4,-3.5,1,1,-5,-4.5,-0.5,1.5,1.5,1,-4,-3.5,1,1,1,-5,-4,0,2,-5,-4.5,-0.5,1.5,1.5,1,-3.5,-3,1,1,1,-4,-3.5,0.5,1.5,-5,-4.5,-0.5,1.5,2,1,2.5,3.5,0,0,1,1,0,-4,-4.5,1.5,2,-5,-4.5,0)



avg_wOBA_count_zones <- data.frame(
  counts = as.character(counts),
  zones = as.character(zones),
  swing_score = swing_score,
  take_score = take_score
)
sd_data <- sd_data %>%
  select(Date,Batter, BatterTeam, Balls, Strikes, PitchCall, PlateLocSide, PlateLocHeight,PlayResult, TaggedPitchType, OutsOnPlay, PitchofPA, Outs, PopTime) %>% 
  mutate(Count = paste0(Balls,"-",Strikes),
         Swing = (ifelse(PitchCall == "FoulBall" | PitchCall == "StrikeSwinging" | PitchCall == "InPlay", "Swing", "Take")),
         zones = ifelse(PlateLocHeight >= 1.99 & PlateLocHeight <= 3.01 &
                          PlateLocSide >= (-.7083)/2 & PlateLocSide <= (.7083)/2,
                        "Heart", ifelse(
                          #bottom
                          (PlateLocHeight > 1.6225 & PlateLocHeight < 1.99 & PlateLocSide > -0.5861 & PlateLocSide < 0.5861) |
                            # top
                            (PlateLocHeight > 3.01 & PlateLocHeight < 3.3775 & PlateLocSide > -0.5861 & PlateLocSide < 0.5861) |
                            # left
                            (PlateLocHeight > 1.6225 & PlateLocHeight < 3.3775 & PlateLocSide > -0.5861 & PlateLocSide < (-0.7083/2)) |
                            # right
                            (PlateLocHeight > 1.6225 & PlateLocHeight < 3.3775 & PlateLocSide > (0.7083/2) & PlateLocSide < 0.5861),
                          "Zone", ifelse(
                            #bottom
                            (PlateLocHeight > 1.3775 & PlateLocHeight < 1.6225 & PlateLocSide > -0.8305 & PlateLocSide < 0.8305) |
                              # top
                              (PlateLocHeight > 3.3775 & PlateLocHeight < 3.6225 & PlateLocSide > -0.8305 & PlateLocSide < 0.8305) |
                              # left
                              (PlateLocHeight > 1.3775 & PlateLocHeight < 3.3775 & PlateLocSide > -0.8305 & PlateLocSide < -0.5861) |
                              # right
                              (PlateLocHeight > 1.3775 & PlateLocHeight < 3.3775 & PlateLocSide > 0.5861 & PlateLocSide < 0.8305),
                            "Shadow", ifelse(
                              #bottom
                              (PlateLocHeight > .8875 & PlateLocHeight < 1.3775 & PlateLocSide > -1.3193 & PlateLocSide < 1.3193) |
                                # top
                                (PlateLocHeight > 3.6225 & PlateLocHeight < 4.1125 & PlateLocSide > -1.3193 & PlateLocSide < 1.3193) |
                                # left
                                (PlateLocHeight > .8875 & PlateLocHeight < 4.1125 & PlateLocSide > -1.3193 & PlateLocSide < -0.8305) |
                                # right
                                (PlateLocHeight > .8875 & PlateLocHeight < 4.1125 & PlateLocSide > 0.8305 & PlateLocSide < 1.3193),
                              "Chase", "Waste"))))
         
  )
sd_data$Swing[is.na(sd_data$Swing)] <- FALSE
result <- ifelse(sd_data$PitchCall != "InPlay",sd_data$PitchCall,sd_data$PlayResult)

#format results and pitches
result <- case_when(
  result == "BallCalled" ~ "Ball",
  result == "StrikeCalled" ~ "Looking Strike",
  result == "StrikeSwinging" ~ "Swinging Strike",
  result == "FoulBall" ~ "Foul Ball",
  result == "Out" ~ "Out",
  result == "Single" ~ "Single",
  result == "Double" ~ "Double",
  result == "Triple" ~ "Triple",
  result == "HomeRun" ~ "Home Run",
  result == "HitByPitch" ~ "HBP",
  result == "Error" ~ "Error",
  result == "FieldersChoice" ~ "Fielders Choice",
  result == "Sacrifice" ~ "Sacrifice"
)

sd_data$TaggedPitchType <- case_when(
  sd_data$TaggedPitchType == "FourSeamFastBall" ~ "Fastball",
  sd_data$TaggedPitchType == "ChangeUp" ~ "Change Up",
  sd_data$TaggedPitchType == "Slider" ~ "Slider",
  sd_data$TaggedPitchType == "Sinker" ~ "Sinker",
  sd_data$TaggedPitchType == "Curveball" ~ "Curveball",
  sd_data$TaggedPitchType == "Fastball" ~ "Fastball",
  sd_data$TaggedPitchType == "Cutter" ~ "Cutter",
  sd_data$TaggedPitchType == "TwoSeamFastBall" ~ "Fastball",
  sd_data$TaggedPitchType == "KnuckleBall" ~ "Knuckle Ball",
  sd_data$TaggedPitchType == "Splitter" ~ "Splitter"
  
)

# add result to data
sd_data <- sd_data %>% 
  mutate(result = result)




#create new vector to add swing or take scores
numeric_vector <- numeric(nrow(sd_data))

#check if swing is true then return value from data frame
get_score <- function(swing_type, zone, count) {
  subset <- avg_wOBA_count_zones[zones == zone & counts == count, ]
  if (swing_type == "Swing") {
    return(ifelse(length(subset$swing_score) > 0, subset$swing_score, NA))
  } else {
    return(ifelse(length(subset$take_score) > 0, subset$take_score, NA))
  }
}

#loop through data rows and call get_score
for (i in 1:nrow(sd_data)) {
  numeric_vector[i] <- get_score(sd_data$Swing[i], sd_data$zones[i], sd_data$Count[i])
}

#make sure no missing values
numeric_vector[is.na(numeric_vector)] <- 0


#add score to data
sd_data <- sd_data %>% 
  mutate(score = numeric_vector)

sd_data <- sd_data[!is.na(sd_data$Date), ]

hit_model <- readRDS("hit_model.rds")


# Setting inactivity timeout for authentication page
inactivity <- "function idleTimer() {
var t = setTimeout(logout, 120000);
window.onmousemove = resetTimer; // catches mouse movements
window.onmousedown = resetTimer; // catches mouse movements
window.onclick = resetTimer;     // catches mouse clicks
window.onscroll = resetTimer;    // catches scrolling
window.onkeypress = resetTimer;  //catches keyboard actions
function logout() {
window.close();  //close the window}
function resetTimer() {
clearTimeout(t);
t = setTimeout(logout, 120000);  // time is in milliseconds (1000 is 1 second)}}
idleTimer();"


# data.frame with credentials info for usernames/passwords
credentials <- data.frame(
  user = c('stone',
           'boss',
           'vandy',
           'sikes',
           'studentmanagers',
           'wolf',
           'novick'),
  password = c("Big10champs",
               "Big10champs",
               "Big10champs",
               "Big10champs",
               "TerresFanClub",
               "goat",
               "shorts"),
  stringsAsFactors = FALSE
)

# Changing authentication page text
set_labels(
  language = "en",
  "Please authenticate" = "MSU Baseball Authentication",
  "Username:" = "Username:",
  "Password:" = "Password:")


################################################################################
############################### USER INTERFACE CODE ############################
################################################################################
ui <- secure_app(
  head_auth = tags$script(inactivity),
  
  # Authorization Page code
  theme = shinythemes::shinytheme("united"),
  
  tags_top = tags$div
  (
    tags$h1("LAST UPDATED: 10/16/24 11:29 PM",
            style="align:center;position:relative;top:-90px;margin:0"),
    tags$h3("Spartan Savant",
            style="align:center;position:relative;top:-90px;margin:0"),
    tags$h5("Created, Engineered, and Designed by Josh Wolf",
            style="align:center;position:relative;top:-80px;margin:0"),
    #tags$head(tags$style(authentication_theme)),
    # Hover over tabs for Spartan Green bg and White Text
    tags$head(
      tags$head(tags$title("Spartan Savant")),
      tags$link(rel="shortcut icon",
                href="favicon.ico"),
      tags$style(type = 'text/css',
                 HTML("
                 .btn-primary {
                  color: #ffffff;
                  background-color: #173F35;
                  border-color: #173F35; }
                  .panel-primary {
                  border-color: #173F35; }
                  .btn:hover {
                  background-color: #696158;
                  border-color: #173F35
                  }
                      "))),
    tags$img(src = "SpartanSavant_logo.JPG", width = 550, height = 375, deleteFile=FALSE, 
             style = "margin-top: -55px;
             margin-left: -55px;
             margin-right: -55px;
             ")),
  
  
  ## BEGINNING OF ACTUAL UI (not authentication pg)
  navbarPage(
    
    # "Home" tab:
    titlePanel(title="", windowTitle="Spartan Savant"),
    
    id = "navbar",
    tabPanel("Spartan Savant",
             
             tags$head(
               tags$head(tags$title("Spartan Savant")),
               tags$link(rel="shortcut icon",
                         href="favicon.ico"),
             ),
             tags$style(
               type = 'text/css',
               HTML(".container-fluid > .nav > li > a[data-value='Spartan Savant'] {
                        font-size: 21px
                        }
                        .navbar-nav li a:hover, .navbar-nav > a {
                        color: white !important;
                        background-color:#173F35 !important;
                        }")),
             
             column(
               10, offset = 1,
               
               fluidRow(
                 column(
                   4,
                   titlePanel("SPARTAN SAVANT"),
                   HTML("<h6> Created, Engineered, and Designed by <b>Josh Wolf</b></h5>"),
                 )
               ),
               
               hr(style = "border-color: black;"),
               
               wellPanel(style = "background: white; border-color:black; border-width:2px",
                         id = "homepage",
                         fluidRow(
                           column(
                             5,
                             HTML("<h4>Welcome to <b>SPARTAN SAVANT</b>: <br> The home of all things Michigan State Baseball analytics.</h4>"),
                             br(),
                             
                             actionButton("home_to_PitcherReport_tab", "View Pitcher Reports"),
                             tags$style(HTML('#home_to_PitcherReport_tab{color: white; background-color: #173F35}
                                   #home_to_PitcherReport_tab:hover{background-color:#696158}')),
                             
                             actionButton("home_to_UmpireReport_tab", "View Umpire Reports"),
                             tags$style(HTML('#home_to_UmpireReport_tab{color: white; background-color: #173F35}
                                   #home_to_UmpireReport_tab:hover{background-color:#696158}')),
                             
                             actionButton("home_to_vandy_report_tab", "View Vandy Report"),
                             tags$style(HTML('#home_to_vandy_report_tab{color: white; background-color: #173F35}
                                   #home_to_vandy_report_tab:hover{background-color:#696158}')),
                             
                             
                             actionButton("home_to_batter_report_tab", "View Batter Report"),
                             tags$style(HTML('#home_to_batter_report_tab{color: white; background-color: #173F35}
                                   #home_to_batter_report_tab:hover{background-color:#696158}')),
                             
                             
                             actionButton("home_to_Reload_tab", "Reload Data"),
                             tags$style(HTML('#home_to_Reload_tab{color: Black; background-color: #173F35}
                                   #home_to_Reload_tab:hover{background-color:#696158}')),
                             
                             actionButton("home_to_upload_tab", "Upload CSV Data"),
                             tags$style(HTML('#home_to_upload_tab{color: white; background-color: #173F35}
                                   #home_to_upload_tab:hover{background-color:#696158}')),
                             
                             actionButton("home_to_TeamOffense_tab", "View Team Offense"),
                             tags$style(HTML('#home_to_TeamOffense_tab{color: white; background-color: #173F35}
                                   #home_to_TeamOffense_tab:hover{background-color:#696158}')),
                             br(),
                             hr(style = "border-color: black;"),
                             br(),
                             img(
                               src = "BAS_SocAvatar 2.JPG",
                               height = 450,
                               width = 450),
                             br(),
                             br(),
                             align = 'center' 
                           ),
                           column(
                             7,
                             img(
                               src = "SpartanSavantJW.PNG",
                               height = 600,
                               width = 600),
                             align = "center"),
                           br(),
                         ),
                         
               ),
               br(),
               p(em("If the contents of this page appear distorted, please decrease your web browser zoom to 80% or 90%."),
                 align = "center",
                 style = "font-size:20px;"
               ),
             )
    ),
    
    
    
    
    tabPanel(
      useShinyjs(),
      title = "Upload",
      useShinyjs(),  
      titlePanel("Upload Game CSV"),
      sidebarLayout(
        sidebarPanel(
          fileInput("file", "Input CSV File", accept = ".csv"),
          textInput("umpire", "Umpire Name", value = ""),
          textInput("game_number", "Game Number", value = ""),
          actionButton("upload", "Upload")
        ),
        mainPanel(
          withSpinner(textOutput("status"), type = 8, id = "spinner_status")  
        )
      ),
      tags$head(
        tags$style(
          HTML(
            "#status.error { color: red; }
         #status.success { color: green; }"
          )
        )
      )
    ),
    
    
    
    
    
    
    
    
    # Pitcher Reports Tab:
    tabPanel(
      
      "Pitcher Reports",
      
      column(
        10,
        offset = 1,
        titlePanel("Pitcher Reports"),
        hr(style = "border-color: black;"),
        
        fluidRow(
          column(
            2,
            selectInput(
              inputId = "PitcherInput",
              label = "Select Pitcher",
              choices = sort(msu_pitchers)
            )
          ),
          
          column(
            2,
            selectInput(
              inputId = "SeasonInput_pitcher",
              label = "Select Season",
              choices = c('2025 - SCRIMMAGES',  '2025 - PENS', '2025 - ALL',
                          '2024 - SCRIMMAGES', '2024 - SEASON', '2024 - ALL',
                          '2023 - SCRIMMAGES', '2023 - SEASON', '2023 - ALL',
                          'ALL'))
          ),
          
          column(
            2,
            selectInput(
              inputId = "GameInput_pitcher",
              label = "Select Game",
              choices = ""
            )
          ),
          
          column(
            2,
            p("", style = "margin-bottom: 25px;"),
            capture_pdf(
              selector = "#pitcherreport",
              filename = "Pitcher_Report",
              loading = loading(),
              margins = 25,
              icon("download"), " Download"),
          ),
          
        ),
        
        hr(style = "border-color: black;"),
        wellPanel(style = "background: white; border-color:black; border-width:2px;",
                  id = "pitcherreport",
                  fluidRow(
                    column(
                      2,
                      img(
                        src = "SpartanSavantJW.PNG",
                        height = 150,
                        width = 150
                      ),
                      align = "center",
                    ),
                    column(
                      4,
                      h2(strong(textOutput("selected_pitch"))),
                      hr(style = "border-color: black;"),
                      style = "padding-right:0px;"),
                    column(
                      6,
                      h2("Pitcher Report"),
                      hr(style = "border-color: black;"),
                      h2(textOutput("selected_gamepitcher")),
                      align = "right",
                      style = "padding-left:0px;
              padding-right:50px"
                    )
                  ),
                  
                  hr(style = "border-color: black;"),
                  
                  fluidRow(
                    column(
                      4,
                      offset = 4,
                      h3(strong("Box Score")),
                      dataTableOutput("box_score_table"),
                      align = "center"
                    )
                  ),
                  
                  br(),
                  
                  fluidRow(
                    column(
                      10,
                      offset = 1,
                      h3(strong("Pitch Profile")),
                      dataTableOutput("pitch_profile_table"),
                      align = "center"
                    )
                  ),
                  
                  br(),
                  
                  fluidRow(
                    column(
                      10,
                      offset = 1,
                      h3(strong("Pitch Production")),
                      dataTableOutput("pitch_production_table"),
                      align = "center"
                    )
                  ),
                  
                  br(),
                  br(),
                  
                  fluidRow(
                    column(4, plotOutput("release_point_plot"), align = "center"),
                    column(4, plotOutput("pitch_movement_plot"), align = "center"),
                    column(4, plotOutput("pitch_velocity_plot", width = 400, height = 400), align = "center")
                  ),
                  
                  br(),
                  br(),
                  br(),
                  br(),
                  
                  fluidRow(
                    column(4, plotOutput("pitch_location_plot"), align = "center"),
                    column(4, plotOutput("whiff_plot"), align = "center"),
                    column(4, plotlyOutput("inplay_plot", width = 500, height = 460), align = "center")
                  ),
                  
                  br(),
                  br(),
                  br()
        ),
        
        br(),
        
        p(em("If the contents of this page appear distorted, please decrease your web browser zoom to 80% or 90%."),
          align = "center",
          style = "font-size:20px;"
        )
      )
    ),
    ########### END PITCHER REPORT #############
    
    
    # Umpire Report Tab
    tabPanel(
      
      "Umpire Reports",
      
      column(
        10,
        offset = 1,
        titlePanel("Umpire Reports"),
        hr(style = "border-color: black;"),
        fluidRow(
          
          column(
            2,
            selectInput(
              inputId = "SeasonInput_umpire",
              label = "Select Season",
              choices = c('2025 - SCRIMMAGES', '2024 - SCRIMMAGES', '2024 - SEASON',
                          '2023 - SCRIMMAGES', '2023 - SEASON'))
          ),
          
          column(
            2,
            selectInput(
              inputId = "GameInput_umpire",
              label = "Select Date",
              choices = "")
          ),
          
          # column(
          #   2,
          #   selectInput(
          #     inputId = "DHInput_umpire",
          #     label = "Select Game (If DH)",
          #     choices = ""
          #   )
          # ),
          
          column(
            2,
            selectInput(
              inputId = "HitOrPitch_Input",
              label = "Select Side",
              choices = c('ALL Pitches', 'MSU Batting', 'MSU Pitching')
            )
          ),
          
          column(
            2,
            p("", style = "margin-bottom: 25px;"),
            capture_pdf(
              selector = "#umpirereport",
              filename = "Umpire_Report",
              loading = loading(),
              margins = 25,
              icon("download"), " Download"),
          ),
          
        ),
        
        hr(style = "border-color: black;"),
        wellPanel(
          style = "background: white; border-color:black; border-width:2px",
          id = "umpirereport",
          fluidRow(
            column(
              2,
              img(
                src = "SpartanSavantJW.PNG",
                height = 150,
                width = 150
              ),
              align = "center"
            ),
            column(
              4,
              h2(textOutput("umpire_name")),
              hr(style = "border-color: black;"),
              h2(textOutput("selected_game_umpire")),
              style = "padding-right:0px;"
            ),
            column(
              6,
              h2("Umpire Report"),
              hr(style = "border-color: black;"),
              h2(textOutput("selected_pitches_umpire")),
              align = "right",
              style = "padding-left:0px;
              padding-right:50px"
            )
          ),
          
          
          hr(style = "border-color: black;"),
          fluidRow(
            column(
              6,
              offset = 3,
              h3(strong("Called Pitches Summary")),
              dataTableOutput("umpire_summary_table"),
              align = "center"
            )
          ),
          
          br(),
          br(),
          br(),
          br(),
          
          fluidRow(
            column(4, plotOutput("incorrect_balls_plot"), align = "center"),
            column(4, plotOutput("total_umpire_plot"), align = "center"),
            column(4, plotOutput("incorrect_strikes_plot"), align = "center")
          ),
          
          br(),
          br(),
          br(),
          br(),
          
          fluidRow(
            column(4, plotOutput("ball_accuracy_plot"), align = "center"),
            column(4, plotOutput("total_accuracy_plot"), align = "center"),
            column(4, plotOutput("strike_accuracy_plot"), align = "center"),
          ),
          
          br(),
          br(),
          br()
        ),
        
        
        br(),
        p(em("If the contents of this page appear distorted, please decrease your web browser zoom to 80% or 90%."),
          align = "center",
          style = "font-size:20px;"
        )
      )
    ),
    
    # Team Offense Tab
    tabPanel(
      
      "Team Offense",
      
      column(
        10,
        offset = 1,
        titlePanel("Team Offense"),
        hr(style = "border-color: black;"),
        
        
        fluidRow(
          
          column(
            2,
            selectInput(
              inputId = "SeasonInput_offense",
              label = "Select Season",
              choices = c('2025 - SCRIMMAGES','2024 - SCRIMMAGES', '2024 - SEASON', '2024 - ALL',
                          '2023 - SCRIMMAGES', '2023 - SEASON', '2023 - ALL',
                          'ALL'))
          ),
          
          column(
            12,
            tabsetPanel(type = "tabs", 
                        
                        tabPanel("wASI", 
                                 tags$style(
                                   type = 'text/css',
                                   HTML(".nav-tabs>li>a {color: #173F35;}
                                        .nav-tabs li a:hover, .nav-tabs > a {color: white !important;background-color:#696158 !important;}")),
                                 fluidRow(
                                   column(
                                     2,
                                     p("", style = "margin-bottom: 25px;"),
                                     capture_pdf(
                                       selector = "#wASI",
                                       filename = "wASI_Report",
                                       loading = loading(),
                                       margins = 25,
                                       icon("download"), " Download")),
                                 ), 
                                 br(),
                                 wellPanel(
                                   style = "background: white; border-color:black; border-width:2px",
                                   id = "wASI",
                                   fluidRow(
                                     column(
                                       2,
                                       img(
                                         src = "SpartanSavantJW.PNG",
                                         height = 150,
                                         width = 150
                                       ),
                                       align = "center"
                                     ),
                                     column(
                                       4,
                                       h2(strong(("Andrew Stone Index"))),
                                       hr(style = "border-color: black;"),
                                       sliderInput("PAs", "Number of PAs",
                                                   min = 0,
                                                   max = max(wasi_players$PA),
                                                   value = c(3.1*max(wasi_players$G), max(wasi_players$PA))),
                                       p("Default setting is 3.1 PA per team game"),
                                       style = "padding-right:0px;"),
                                     column(
                                       6,
                                       h2("Team Offense"),
                                       hr(style = "border-color: black;"),
                                       align = "right",
                                       style = "padding-left:0px;
                                       padding-right:50px"
                                     )
                                   ),
                                   hr(style = "border-color: black;"),
                                   br(),
                                   fluidRow(
                                     column(
                                       12,
                                       h3(strong("wASI Leaderboard")),
                                       DT::dataTableOutput("wASI_table"),
                                       align = "center"
                                     )
                                   ),
                                   hr(style = "border-color: black;"),
                                   fluidRow(
                                     # DT + text boxes column
                                     column(12,
                                            # DataTable column:
                                            column(
                                              6,
                                              offset = 3,
                                              h3(strong("ASI Team Stats")),
                                              DT::dataTableOutput("wASI_team_table"),
                                              align = "center"
                                            ), 
                                            # Text Box Column:
                                            column(3,
                                                   column(7,
                                                          div(
                                                            style = "border-style: solid; border-color: black;",
                                                            HTML("<h5><b><span style=background-color:lightgreen>Notes:</span></b></h5>
                                                       <p>HH = BIP > 90<br>
                                                       Chase = Swing @ Ball<br></p>")),
                                                          align = 'center'),
                                                   column(5,
                                                          div(
                                                            style = "border-style: solid; border-color: black;",
                                                            HTML("<h5><b><span style=background-color:lightgreen>wASI scale:</span></b></h5>
                                                       wOBA = 30%<br>
                                                       HH% = 25%<br>
                                                       Chase% = 25%<br>
                                                       OPS = 10%<br>
                                                       QAB = 10%<br>")),
                                                          align = 'center'),
                                            ),
                                     ),
                                   ),
                                   br(),
                                 ),
                                 p(em("If the contents of this page appear distorted, please decrease your web browser zoom to 80% or 90%."),
                                   align = "center",
                                   style = "font-size:20px;"),
                        ),
                        
                        ### Offense Stats Tab ###
                        tabPanel("Stats", 
                                 tags$style(
                                   type = 'text/css',
                                   HTML(".nav-tabs>li>a {color: #173F35;}
                                        .nav-tabs li a:hover, .nav-tabs > a {color: white !important;background-color:#696158 !important;}")),
                                 fluidRow(
                                   column(
                                     2,
                                     p("", style = "margin-bottom: 25px;"),
                                     capture_pdf(
                                       selector = "#Stats",
                                       filename = "Stats_Report",
                                       loading = loading(),
                                       margins = 25,
                                       icon("download"), " Download")),
                                 ), 
                                 br(),
                                 wellPanel(
                                   style = "background: white; border-color:black; border-width:2px",
                                   id = "Stats",
                                   fluidRow(
                                     column(
                                       2,
                                       img(
                                         src = "SpartanSavantJW.PNG",
                                         height = 150,
                                         width = 150
                                       ),
                                       align = "center"
                                     ),
                                     column(
                                       4,
                                       h2(strong(("Batting Stats"))),
                                       hr(style = "border-color: black;"),
                                       style = "padding-right:0px;"),
                                     column(
                                       6,
                                       h2("Team Offense"),
                                       hr(style = "border-color: black;"),
                                       align = "right",
                                       style = "padding-left:0px;
                                       padding-right:50px"
                                     )
                                   ),
                                   hr(style = "border-color: black;"),
                                   br(),
                                   fluidRow(
                                     column(
                                       12,
                                       h3(strong("Stats Leaderboard")),
                                       DT::dataTableOutput("offense_stats_table"),
                                       align = "center"
                                     )
                                   ),
                                   hr(style = "border-color: black;"),
                                   fluidRow(
                                     column(
                                       12,
                                       h3(strong("Team Stats")),
                                       DT::dataTableOutput("offense_stats_team_table"),
                                       align = "center"
                                     )
                                   ),
                                   br(),
                                 ),
                                 p(em("If the contents of this page appear distorted, please decrease your web browser zoom to 80% or 90%."),
                                   align = "center",
                                   style = "font-size:20px;"),
                        ),
                        
                        
                        
                        ######### BLAST TAB ############
                        
                        tabPanel("Blast Motion",
                                 fluidRow(
                                   column(
                                     2,
                                     p("", style = "margin-bottom: 25px;"),
                                     capture_pdf(
                                       selector = "#BlastMotion",
                                       filename = "BlastMotion_Report",
                                       loading = loading(),
                                       margins = 25,
                                       icon("download"), " Download")),
                                 ), 
                                 br(),
                                 wellPanel(
                                   style = "background: white; border-color:black; border-width:2px",
                                   id = "BlastMotion",
                                   fluidRow(
                                     column(
                                       2,
                                       img(
                                         src = "SpartanSavantJW.PNG",
                                         height = 150,
                                         width = 150
                                       ),
                                       align = "center"
                                     ),
                                     column(
                                       4,
                                       h2(strong(("Blast Motion"))),
                                       hr(style = "border-color: black;"),
                                       
                                       p("", style = "margin-bottom: 25px;"),
                                       dateRangeInput(inputId = "DateRangeInput", 
                                                      label = "Select Date Range",
                                                      start = min(blast$Date, na.rm = TRUE),
                                                      end = max(blast$Date, na.rm = TRUE)),
                                       style = "padding-right:0px;"),
                                     
                                     column(
                                       6,
                                       h2("Team Offense"),
                                       hr(style = "border-color: black;"),
                                       align = "right",
                                       style = "padding-left:0px;
                                       padding-right:50px"
                                     )
                                   ),
                                   hr(style = "border-color: black;"),
                                   br(),
                                   fluidRow(
                                     column(
                                       12,
                                       h3(strong("Blast Motion Data")),
                                       dataTableOutput("Blast_table"),
                                       align = "center"
                                     )
                                   ),
                                   br(),
                                 ),
                                 p(em("If the contents of this page appear distorted, please decrease your web browser zoom to 80% or 90%."),
                                   align = "center",
                                   style = "font-size:20px;"),
                        ),
            ),
          )
        ),
      ),
    ),
    
    
    # Scrimmage Stats Tab
    tabPanel(
      
      "Scrimmage Stats",
      
      column(
        10,
        offset = 1,
        titlePanel("Scrimmage Stats"),
        hr(style = "border-color: black;"),
        
        
        fluidRow(
          
          
          column(
            12,
            tabsetPanel(type = "tabs", 
                        
                        tabPanel("Batting", 
                                 tags$style(
                                   type = 'text/css',
                                   HTML(".nav-tabs>li>a {color: #173F35;}
                                        .nav-tabs li a:hover, .nav-tabs > a {color: white !important;background-color:#696158 !important;}")),
                                 fluidRow(
                                   column(
                                     2,
                                     p("", style = "margin-bottom: 25px;"),
                                     capture_pdf(
                                       selector = "#Batting_Scrimmage",
                                       filename = "Batting_Scrimmage_Stats",
                                       loading = loading(),
                                       margins = 25,
                                       icon("download"), " Download")),
                                 ), 
                                 br(),
                                 wellPanel(
                                   style = "background: white; border-color:black; border-width:2px",
                                   id = "Batting_Scrimmage",
                                   fluidRow(
                                     column(
                                       2,
                                       img(
                                         src = "SpartanSavantJW.PNG",
                                         height = 150,
                                         width = 150
                                       ),
                                       align = "center"
                                     ),
                                     column(
                                       4,
                                       h2(strong(("Batting Stats"))),
                                       hr(style = "border-color: black;"),
                                       style = "padding-right:0px;"),
                                     column(
                                       6,
                                       h2("Team Offense"),
                                       hr(style = "border-color: black;"),
                                       align = "right",
                                       style = "padding-left:0px;
                                       padding-right:50px"
                                     )
                                   ),
                                   hr(style = "border-color: black;"),
                                   br(),
                                   fluidRow(
                                     column(
                                       12,
                                       h3(strong("Player Stats")),
                                       DT::dataTableOutput("player_batting_stats"),
                                       align = "center"
                                     )
                                   ),
                                   hr(style = "border-color: black;"),
                                   fluidRow(
                                     # DT + text boxes column
                                     column(12,
                                            # DataTable column:
                                            column(
                                              12,
                                              h3(strong("Team Stats")),
                                              DT::dataTableOutput("team_batting_stats"),
                                              align = "center"
                                            ), 
                                     ),
                                   ),
                                   br(),
                                 ),
                                 p(em("If the contents of this page appear distorted, please decrease your web browser zoom to 80% or 90%."),
                                   align = "center",
                                   style = "font-size:20px;"),
                        ),
                        
                        ### Pitching Scrimmage Stats Sub-Tab ###
                        tabPanel("Pitching", 
                                 tags$style(
                                   type = 'text/css',
                                   HTML(".nav-tabs>li>a {color: #173F35;}
                                        .nav-tabs li a:hover, .nav-tabs > a {color: white !important;background-color:#696158 !important;}")),
                                 fluidRow(
                                   column(
                                     2,
                                     p("", style = "margin-bottom: 25px;"),
                                     capture_pdf(
                                       selector = "#Pitching_Scrimmage",
                                       filename = "Pitching_Scrimmage_Stats",
                                       loading = loading(),
                                       margins = 25,
                                       icon("download"), " Download")),
                                 ), 
                                 br(),
                                 wellPanel(
                                   style = "background: white; border-color:black; border-width:2px",
                                   id = "Pitching_Scrimmage",
                                   fluidRow(
                                     column(
                                       2,
                                       img(
                                         src = "SpartanSavantJW.PNG",
                                         height = 150,
                                         width = 150
                                       ),
                                       align = "center"
                                     ),
                                     column(
                                       4,
                                       h2(strong(("Pitching Stats"))),
                                       hr(style = "border-color: black;"),
                                       style = "padding-right:0px;"),
                                     column(
                                       6,
                                       h2("Team Pitching"),
                                       hr(style = "border-color: black;"),
                                       align = "right",
                                       style = "padding-left:0px;
                                       padding-right:50px"
                                     )
                                   ),
                                   hr(style = "border-color: black;"),
                                   br(),
                                   fluidRow(
                                     column(
                                       12,
                                       h3(strong("Player Stats")),
                                       DT::dataTableOutput("player_pitching_stats"),
                                       align = "center"
                                     )
                                   ),
                                   hr(style = "border-color: black;"),
                                   fluidRow(
                                     column(
                                       12,
                                       h3(strong("Team Stats")),
                                       DT::dataTableOutput("team_pitching_stats"),
                                       align = "center"
                                     )
                                   ),
                                   br(),
                                 ),
                                 p(em("If the contents of this page appear distorted, please decrease your web browser zoom to 80% or 90%."),
                                   align = "center",
                                   style = "font-size:20px;"),
                        ),
                        
            ),
          )
        ),
      ),
    ),
    ## END Scrimmage Stats Tab
    
    
    
    
    tabPanel(
      "Batter Report",
      
      column(
        10,
        offset = 1,
        titlePanel("Batter Report"),
        hr(style = "border-color: black;"),
        
        fluidRow(
          column(
            3,
            selectInput(
              inputId = "Batter_Select_Input",
              label = "Select Batter",
              choices = ""
            )
          ),
          
          column(
            3,
            selectInput(
              inputId = "Season_Select_Input",
              label = "Select Season",
              choices = c('2025 - SCRIMMAGES', '2024 - SEASON', '2024 - SCRIMMAGES', '2023 - SEASON', '2023 - SCRIMMAGES')
            )
          ),
          
          column(
            3,
            selectInput(
              inputId = "Game_Select_Input",
              label = "Select Game",
              choices = ""
            )
          ),
          
          column(
            3,
            p("", style = "margin-bottom: 25px;"),
            capture_pdf(
              selector = "#Batter_Report",
              filename = paste("Batter_Report"),
              loading = loading(),
              margins = 10,
              icon("download"), " Download"
            ),
            actionButton("send_report", "Send Report via Email", icon = icon("envelope"))
          ),
        ),
        
        hr(style = "border-color: black;"),
        wellPanel(style = "background: white; border-color:black; border-width:2px;",
                  id = "Batter_Report",
                  
                  fluidRow(
                    column(
                      2,
                      img(
                        src = "SpartanSavantJW.PNG",
                        height = 150,
                        width = 150
                      ),
                      align = "center",
                    ),
                    column(
                      5,
                      h2(strong(textOutput("selected_batter"))),
                      hr(style = "border-color: black;"),
                      style = "padding-right:0px;"
                    ),
                    column(
                      5,
                      h2("Batter Report"),
                      hr(style = "border-color: black;"),
                      h2(textOutput("selected_game_date")),
                      align = "right",
                      style = "padding-left:0px; padding-right:50px;"
                    )
                  ),
                  
                  hr(style = "border-color: black;"),
                  
                  fluidRow(
                    column(
                      12,
                      h3("Season Total Table"),
                      tableOutput("Season_table"),
                      align = "center"
                      
                    )
                  ),
                  
                  br(),
                  
                  fluidRow(
                    column(
                      12,
                      h3("Game Table"),
                      tableOutput("Game_table"),
                      align = "center"
                    )
                  ),
                  
                  fluidRow(
                    column(
                      7,
                      h3(strong("Result Table")),
                      tableOutput("xwOBA_table"),
                      htmlOutput("xwOBA_key"),
                      align = "center"
                    ),
                    
                    column(
                      1,
                      h3(strong("SD Table")),
                      tableOutput("SD_table"),
                      htmlOutput("SD_key"),
                      align = "center"
                    )
                  ),
                  
                  br(),
                  
                  fluidRow(
                    column(
                      10,
                      offset = 1,
                      plotOutput("plate_graph", width = "900px", height = "550px"),
                      align = "center"
                    )
                  ),
                  
                  br(),
                  
                  fluidRow(
                    column(
                      7,
                      plotOutput("spray_chart", width = "475px", height = "400px"),
                      align = "center"
                    ),
                    
                    column(
                      1,
                      plotOutput("heat_map", width = "475px", height = "400px"),
                      align = "center"
                    )
                  ),
                  
                  br(),
                  br(),
                  
                  p(em("If the contents of this page appear distorted, please decrease your web browser zoom to 80% or 90%."),
                    align = "center",
                    style = "font-size:20px;")
        )
      )
    ),
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    tabPanel(
      "Vandy Report",
      
      id = "Pitcher_Report",
      column(
        10,
        offset = 1,
        titlePanel("Vandy Report"),
        hr(style = "border-color: black;"),
        
        fluidRow(
          column(
            3,
            selectInput(
              inputId = "Pitcher_Input",
              label = "Pitcher",
              choices = sort(unique(master$Pitcher[master$Pitcher != "" & master$PitcherTeam == "MIC_SPA" & master$Season == '2024 - SEASON']))
            )
          ),
          
          column(
            3,
            selectInput(
              inputId = "Season_Input",
              label = "Season",
              choices = c('2025 - SCRIMMAGES', '2025 - PENS', '2024 - SEASON', '2024 - SCRIMMAGES', '2023 - SEASON', '2023 - SCRIMMAGES')
            )
          ),
          
          column(
            3,
            selectInput(
              inputId = "Game_Select_Inputt",
              label = "Select Game",
              choices = ""
            )
          ),
          column(3,
                 selectInput(
                   inputId = "BatterHand_Input",
                   label = "Batter Hand",
                   choices = c("Both", "Right", "Left")
                 )
          ),
          column(
            3,
            p("", style = "margin-bottom: 25px;"),
            capture_pdf(
              selector = "#Pitcher_Report",
              filename = paste("Pitcher_Report"),
              loading = loading(),
              margins = 10,
              icon("download"), " Download"),
          ),
      
        column(
          3,
          dateRangeInput(
            inputId = "date_range",
            label = "Select Date Range:",
            start = "2024/09/01",
            end = max(master$Date, na.rm = TRUE)
          )
        ),
      ),
        
        hr(style = "border-color: black;"),
        wellPanel(style = "background: white; border-color:black; border-width:2px;",
                  id = "Pitcher_Report",
                  
                  fluidRow(
                    column(
                      2,
                      img(
                        src = "SpartanSavantJW.PNG",
                        height = 150,
                        width = 150
                      ),
                      align = "center",
                    ),
                    column(
                      5,
                      h2(strong(textOutput("selected_pitcher"))),
                      hr(style = "border-color: black;"),
                      style = "padding-right:0px;"
                    ),
                    column(
                      5,
                      h2("Vandy Report"),
                      hr(style = "border-color: black;"),
                      h2(textOutput("selected_gamedate")),
                      align = "right",
                      style = "padding-left:0px; padding-right:50px;"
                    )
                  ),
                  
                  hr(style = "border-color: black;"),
                  
                  fluidRow(
                    column(
                      12,
                      h3("Box Stats Table"),
                      reactableOutput("season_stat_sum"),
                      align = "center"
                      
                    )
                  ),
                  
                  br(),
                  br(),
                  
                  fluidRow(
                    column(6, plotOutput("velocity_distribution"), align = "center"),
                    column(6, plotlyOutput("interactive_movement_chart", width = 600, height = 500), align = "center")
                  ),
                  
                  br(),
                  br(),
                  br(),
                  br(),
                  
                  
                  conditionalPanel(
                    condition = "input.Game_Select_Inputt == 'All'",
                    fluidRow(
                      column(
                        12,
                        h3(strong("5 Games Rolling Pitch Usage")),
                        plotOutput("usage_graph"),
                        align = "center"
                      )
                    )
                  ),
                  
                  conditionalPanel(
                    condition = "input.Game_Select_Inputt != 'All'",
                    fluidRow( 
                      column(
                        12,
                        h3(strong("Usage")),
                        plotOutput("single_usage_graph"),
                        align = "center"
                        
                      )
                    )
                  ),
                  
                  br(),
                  
                  fluidRow(
                    column(
                      10,
                      offset = 1,
                      reactableOutput("pitch_profile"),
                      align = "center"
                    )
                  ),
                  
                  
                  br(),
                  br(),
                  
                  p(em("If the contents of this page appear distorted, please decrease your web browser zoom to 80% or 90%."),
                    align = "center",
                    style = "font-size:20px;")
        )
      )
    )
    
    
    
    
    
    ########## End of Tabs ###########
    
  )
)





################################################################################
############################### SERVER CODE ####################################
################################################################################

server <- function(input, output, session) {
  
  
  #Checking Credentials
  res_auth <- secure_server(check_credentials = check_credentials(credentials))
  output$auth_output <- renderPrint({
    reactiveValuesToList(res_auth)
  })
  
  # Switch Tab Buttons:
  observeEvent(input$home_to_PitcherReport_tab, {
    updateTabsetPanel(session, "navbar", selected = "Pitcher Reports")
  })
  observeEvent(input$home_to_UmpireReport_tab, {
    updateTabsetPanel(session, "navbar", selected = "Umpire Reports")
  })
  observeEvent(input$home_to_Reload_tab, {
    session$reload()
  })
  
  observeEvent(input$home_to_upload_tab, {
    updateTabsetPanel(session, "navbar", selected = "Upload")
  })
  
  
  observeEvent(input$home_to_TeamOffense_tab, {
    updateTabsetPanel(session, "navbar", selected = "Team Offense")
  })
  
  observeEvent(input$home_to_batter_report_tab, {
    updateTabsetPanel(session, "navbar", selected = "Batter Report")
  })
  
  observeEvent(input$home_to_vandy_report_tab, {
    updateTabsetPanel(session, "navbar", selected = "Vandy Report")
  })
  
  # observeEvent(input$action_logout, {
  #   session$reload()
  # }) 
  
  # observeEvent(input$action_closeapp, {
  #   closeApp()
  # }) 
  
  # Updating Season options based on Pitcher Selection
  # observeEvent(
  #   input$PitcherInput,
  #   updateSelectInput(session,
  #                     inputId = "SeasonInput_pitcher",
  #                     label = "Select Season", 
  #                     choices = c('2023 - SCRIMMAGES', '2023 - SEASON', '2023 - POSTSEASON',
  #                                      'ALL')))
  
  
  # Updating Date options based on Pitcher and Season Selection
  observeEvent(
    c(input$SeasonInput_pitcher, input$PitcherInput),
    updateSelectInput(session,
                      inputId = "GameInput_pitcher",
                      label = "Select Game", 
                      choices = sort(c("ALL", as.character(unique(master$Date[master$Season == input$SeasonInput_pitcher &
                                                                                master$Pitcher == input$PitcherInput]))), decreasing = TRUE)))
  
  # Updating game date options based on Season election (Ump reports)
  observeEvent(
    input$SeasonInput_umpire,
    updateSelectInput(session,
                      inputId = "GameInput_umpire",
                      label = "Select Date", 
                      choices = sort(c(as.character(unique(master$Date[master$Season == input$SeasonInput_umpire]))), decreasing = TRUE)))
  
  
  
  # Updating DH options based on Date Selection (Ump reports)
  # Old logic was to create a column in csv "GameNumber" and put '1' in each row. Put '2' in each row if row is for second game of a double header. This way you can filter on shiny app between game 1 and 2 if Date is the same.
  # observeEvent(
  #   input$GameInput_umpire,
  #   updateSelectInput(session,
  #                     inputId = "DHInput_umpire",
  #                     label = "Select Game (if DH)", 
  #                     choices = sort(c(as.character(unique(master$GameNumber[master$Date == input$GameInput_umpire]))))))
  
  
  
  # Generating text Outputs based on user selections
  output$selected_pitch <- renderText({paste(input$PitcherInput)})
  output$selected_gamepitcher <- renderText({paste(input$GameInput_pitcher)})
  
  # output$selected_pitcher_cumulative <- renderText({paste(input$PitcherInput_cumulative)})
  
  output$selected_game_umpire <- renderText({paste(input$GameInput_umpire)})
  
  output$selected_pitches_umpire <- renderText({paste(input$HitOrPitch_Input)})
  
  
  
  
  
  
  ###############################################
  ######### Upload CSV ###########
  ###############################################
  
  
  # hide the spinner when app gets loaded in
  hide(id = "spinner_status")
  
  observeEvent(input$upload, {
    req(input$file)
    
    ###### spinner activated when uploaded ######
    show(id = "spinner_status")
    
    tryCatch({
      ###### new game CSV ######
      new_game_file <- input$file$datapath
      
      ###### master CSV ######
      master_file <- "Master_data.csv"
      master_data <- read.csv(master_file, stringsAsFactors = FALSE)
      
      ###### load new game CSV ######
      new_game_data <- read.csv(new_game_file, stringsAsFactors = FALSE, na.strings = "")
      
      ###### fill in Umpire and GameNumber columns with user inputs ######
      new_game_data$Umpire <- input$umpire
      new_game_data$GameNumber <- input$game_number
      
      new_game_data$Date <- format(as.Date(new_game_data$Date, format = "%m/%d/%Y"), "%m/%d/%Y")
      
      
      ###### columns in new game data match master data types ######
      for (col in colnames(master_data)) {
        if (col %in% colnames(new_game_data)) {
          new_game_data[[col]] <- as(new_game_data[[col]], class(master_data[[col]]))
        }
      }
      
      ###### column order matches ######
      new_game_data <- new_game_data %>% select(colnames(master_data))
      
      ###### duplicate GameUIDs ######
      new_game_ids <- new_game_data$GameUID
      existing_ids <- master_data$GameUID
      
      if (any(new_game_ids %in% existing_ids)) {
        stop("Duplicate Game IDs found. Data not Uploaded")
      }
      
      ###### wrote the new game data to the master data ######
      updated_master_data <- bind_rows(master_data, new_game_data)
      
      ###### Write the updated data back to the master CSV ######
      write.csv(updated_master_data, master_file, row.names = FALSE)
      
      
      ###### output status ######
      output$status <- renderText("Uploaded Successfully To The Master CSV")
      shinyjs::removeClass(selector = "#status", class = "error")
      shinyjs::addClass(selector = "#status", class = "success")
    }, error = function(e) {
      ###### output error ######
      output$status <- renderText(paste("Error uploading new game data:", e$message))
      shinyjs::removeClass(selector = "#status", class = "success")
      shinyjs::addClass(selector = "#status", class = "error")
      
    })
    
    ###### hide the spinner after output ######
    hide(id = "spinner_status")
  })
  
  
  
  observeEvent(input$Season_Input,{
    
    updateSelectInput(session,
                      inputId = "Pitcher_Input",
                      label = "Pitcher",
                      choices = sort(unique(master$Pitcher[master$Pitcher != "" & master$PitcherTeam %in% c("MIC_SPA", "MIC_PRA") & master$Season == input$Season_Input]))
    )
    
    observeEvent(input$Pitcher_Input, {
      updateSelectInput(session,
                        inputId = "Game_Select_Inputt",
                        label = "Select Game",
                        choices = c("All", rev(sort(as.character(unique(master$Date[master$Season == input$Season_Input & master$Pitcher == input$Pitcher_Input])))))
      )
    })
  })
  
  
  
  # Reactive expressions to capture the selected batter and game date
  selected_pitcher <- reactive({
    req(input$Pitcher_Input)
    input$Pitcher_Input
  })
  
  selected_gamedate <- reactive({
    req(input$Game_Select_Inputt)
    input$Game_Select_Inputt
  })
  
  # Render the text outputs in the UI
  output$selected_pitcher <- renderText({
    selected_pitcher()
  })
  
  output$selected_gamedate <- renderText({
    selected_gamedate()
  })
  
  observeEvent(c(input$Pitcher_Input, input$BatterHand_Input, input$Game_Select_Inputt, input$date_range), {
    
    
    if (input$BatterHand_Input == "Right"){
      master <- master %>% 
        filter(BatterSide == "Right")
    }
    else if(input$BatterHand_Input == "Left"){
      master <- master %>% 
        filter(BatterSide == "Left")
    }
    
    if (input$Game_Select_Inputt != "All"){
      master <- master %>% 
        filter(as.character(Date) == as.character(input$Game_Select_Inputt))
    }
    
    master <- master %>% 
      filter(Pitcher == input$Pitcher_Input & Season == input$Season_Input)
    
    if (input$Game_Select_Inputt == "All") {
      master <- master %>%
        filter(Date >= input$date_range[1] & Date <= input$date_range[2])
    } else {
      master <- master %>%
        filter(as.character(Date) == as.character(input$Game_Select_Inputt))
    }
    
    
    
    master <- master %>% 
      separate(Tilt, into = c("hour", "minute"), sep = ":") %>% 
      mutate(hour = as.integer(hour),
             minute = as.integer(minute)) %>% 
      mutate(time_minutes = hour * 60 + minute) %>% 
      mutate(ball_or_strike = case_when(
        (PitchCall == "FoulBall" | PitchCall == "FoulBallNotFieldable" | PitchCall == "FoulBallFieldable") & Strikes == 2 ~ NA_character_,
        PitchCall == "StrikeCalled" | PitchCall == "StrikeSwinging" | PitchCall == "FoulBall" | PitchCall == "FoulBallNotFieldable" | PitchCall == "FoulBallFieldable" ~ "Strike",
        PitchCall == "BallCalled" ~ "Ball",
        TRUE ~ NA_character_
      ),
      count = paste0(Balls, "-", Strikes)
      ) %>% 
      mutate(RV = case_when(
        count == "3-0" & ball_or_strike == "Ball" ~ 0.051,
        count == "3-0" & ball_or_strike == "Strike" ~ -0.117,
        count == "3-1" & ball_or_strike == "Ball" ~ 0.168,
        count == "3-1" & ball_or_strike == "Strike" ~ -0.066,
        count == "2-0" & ball_or_strike == "Ball" ~ 0.143,
        count == "2-0" & ball_or_strike == "Strike" ~ -0.062,
        count == "3-2" & ball_or_strike == "Ball" ~ 0.234,
        count == "3-2" & ball_or_strike == "Strike" ~ -0.294,
        count == "1-0" & ball_or_strike == "Ball" ~ 0.088,
        count == "1-0" & ball_or_strike == "Strike" ~ -0.035,
        count == "2-1" & ball_or_strike == "Ball" ~ 0.064,
        count == "2-1" & ball_or_strike == "Strike" ~ -0.069,
        count == "0-0" & ball_or_strike == "Ball" ~ 0.032,
        count == "0-0" & ball_or_strike == "Strike" ~ -0.037,
        count == "1-1" & ball_or_strike == "Ball" ~ 0.048,
        count == "1-1" & ball_or_strike == "Strike" ~ -0.054,
        count == "2-2" & ball_or_strike == "Ball" ~ 0.085,
        count == "2-2" & ball_or_strike == "Strike" ~ -0.209,
        count == "0-1" & ball_or_strike == "Ball" ~ 0.024,
        count == "0-1" & ball_or_strike == "Strike" ~ -0.051,
        count == "1-2" & ball_or_strike == "Ball" ~ 0.038,
        count == "1-2" & ball_or_strike == "Strike" ~ -0.171,
        count == "0-2" & ball_or_strike == "Ball" ~ 0.021,
        count == "0-2" & ball_or_strike == "Strike" ~ -0.150,
        count == "3-0" & TaggedHitType == "GroundBall" ~ -0.314,
        count == "3-0" & TaggedHitType == "LineDrive" ~ 0.045,
        count == "3-0" & TaggedHitType == "FlyBall" ~ -0.212,
        count == "3-1" & TaggedHitType == "GroundBall" ~ -0.197,
        count == "3-1" & TaggedHitType == "LineDrive" ~ 0.162,
        count == "3-1" & TaggedHitType == "FlyBall" ~ -0.095,
        count == "2-0" & TaggedHitType == "GroundBall" ~ -0.171,
        count == "2-0" & TaggedHitType == "LineDrive" ~ 0.188,
        count == "2-0" & TaggedHitType == "FlyBall" ~ -0.069,
        count == "3-2" & TaggedHitType == "GroundBall" ~ -0.131,
        count == "3-2" & TaggedHitType == "LineDrive" ~ 0.228,
        count == "3-2" & TaggedHitType == "FlyBall" ~ -0.029,
        count == "1-0" & TaggedHitType == "GroundBall" ~ -0.109,
        count == "1-0" & TaggedHitType == "LineDrive" ~ 0.250,
        count == "1-0" & TaggedHitType == "FlyBall" ~ -0.007,
        count == "2-1" & TaggedHitType == "GroundBall" ~ -0.107,
        count == "2-1" & TaggedHitType == "LineDrive" ~ 0.252,
        count == "2-1" & TaggedHitType == "FlyBall" ~ -0.005,
        count == "0-0" & TaggedHitType == "GroundBall" ~ -0.074,
        count == "0-0" & TaggedHitType == "LineDrive" ~ 0.285,
        count == "0-0" & TaggedHitType == "FlyBall" ~ 0.028,
        count == "1-1" & TaggedHitType == "GroundBall" ~ -0.061,
        count == "1-1" & TaggedHitType == "LineDrive" ~ 0.298,
        count == "1-1" & TaggedHitType == "FlyBall" ~ 0.041,
        count == "2-2" & TaggedHitType == "GroundBall" ~ -0.046,
        count == "2-2" & TaggedHitType == "LineDrive" ~ 0.313,
        count == "2-2" & TaggedHitType == "FlyBall" ~ 0.056,
        count == "0-1" & TaggedHitType == "GroundBall" ~ -0.038,
        count == "0-1" & TaggedHitType == "LineDrive" ~ 0.321,
        count == "0-1" & TaggedHitType == "FlyBall" ~ 0.064,
        count == "1-2" & TaggedHitType == "GroundBall" ~ -0.008,
        count == "1-2" & TaggedHitType == "LineDrive" ~ 0.351,
        count == "1-2" & TaggedHitType == "FlyBall" ~ 0.094,
        count == "0-2" & TaggedHitType == "GroundBall" ~ 0.013,
        count == "0-2" & TaggedHitType == "LineDrive" ~ 0.372,
        count == "0-2" & TaggedHitType == "FlyBall" ~ 0.115,
        TRUE ~ NA
      ))
    
    
    season_stat_sum <- master %>%  
      summarise(IP = round(((sum(KorBB == 'Strikeout') + sum(OutsOnPlay))/3), 2),
                PA = sum(PitchofPA == 1),
                WHIP = sprintf("%.2f", (length(KorBB[KorBB == "Walk"]) + length(PlayResult[PlayResult == "Single" | PlayResult == "Double" | PlayResult == "Triple" | PlayResult == "HomeRun"])) / as.numeric(IP)),
                ERA = sprintf("%.2f", sum(RunsScored[PlayResult != "Error"]) * 9 / as.numeric(IP)),
                FIP = format(round((length(PlayResult[PlayResult == "HomeRun"])*13 + (length(PitchCall[PitchCall == "HitByPitch"]) + length(KorBB[KorBB == "Walk"]))*3 - length(KorBB[KorBB == "Strikeout"])*2) / as.numeric(IP) + 3.2,2),2),
                'K%' = paste0(format(round(length(KorBB[KorBB == "Strikeout"]) / length(PitchofPA[PitchofPA == 1]) * 100,1),1),"%"),
                'BB%' = paste0(format(round(length(KorBB[KorBB == "Walk"]) / length(PitchofPA[PitchofPA == 1]) * 100,1),1),"%"),
                'K - BB%' = paste0(format(round((length(KorBB[KorBB == "Strikeout"]) / length(PitchofPA[PitchofPA == 1]) * 100) - (length(KorBB[KorBB == "Walk"]) / length(PitchofPA[PitchofPA == 1]) * 100), 1), 1), "%")
      )
    
    
    reverse_sides_pitchers <- c("Brewer, Garrett", "Sturgess, Isaac", "Arbaugh, Aidan", 
                                "Grundman, Gannon", "Dzierwa, Joseph", "Sitarz, Gavin", 
                                "Viebrook, George", "Agar, Jeff")
    
    
    
    
    output$interactive_movement_chart <- renderPlotly({
      
      movement_chart <- master %>% 
        ggplot(mapping = aes(x = HorzBreak, y = InducedVertBreak, color = TaggedPitchType, 
                             text = paste("Pitch # (Game):", round(PitchNo, 0), "<br>",
                                          "HB:", round(HorzBreak, 2), "<br>",
                                          "iVB:", round(InducedVertBreak, 2), "<br>",
                                          "Spin:", round(SpinRate, 0), "<br>",
                                          "Velo:", round(RelSpeed, 1), "<br>",
                                          "EV:", round(ExitSpeed, 0), "<br>",
                                          "LA:", round(Angle, 1), "<br>",
                                          "Distance:", round(Distance, 0), "<br>",
                                          "xwOBA:", round(xwOBA, 3)))) +   
        geom_point(size = 1.5) +  
        pitch_colors +  
        labs(title = "Pitch Breaks", x = "Horizontal Movement (in)", y = "Induced Vertical Break (in)", color = "Pitch") + 
        geom_segment(aes(y = 0, yend = 0, x = -25, xend = 25), linetype = "dashed") + 
        geom_segment(aes(y = -25, yend = 25, x = 0, xend = 0), linetype = "dashed") +
        {
          if (input$Pitcher_Input %in% reverse_sides_pitchers) {
            list(
              annotate("text", x = -16, y = -25, label = "<-- ARM SIDE", size = 3, hjust = 0, vjust = 0),  # Bottom left corner
              annotate("text", x = 16, y = -25, label = "GLOVE SIDE -->", size = 3, hjust = 1, vjust = 0)   # Bottom right corner
            )
          } else {
            list(
              annotate("text", x = -16, y = -25, label = "<-- GLOVE SIDE", size = 3, hjust = 0, vjust = 0),  # Bottom left corner
              annotate("text", x = 16, y = -25, label = "ARM SIDE -->", size = 3, hjust = 1, vjust = 0)      # Bottom right corner
            )
          }
        } +
        theme_bw() + 
        xlim(-25, 25) + ylim(-25, 25)
      
      ggplotly(movement_chart, tooltip = "text")
    })
    
    
    
    
    
    
    
    usage_graph_data <- master %>%
      group_by(Date, TaggedPitchType) %>%
      summarise(count = n()) %>%
      group_by(Date) %>%  
      summarise(TaggedPitchType = TaggedPitchType,
                count = count,
                total = sum(count),
                percent = count / total * 100) %>%
      arrange(Date) %>%  
      group_by(TaggedPitchType) %>%
      mutate(rolling_percent = rollmean(percent, 5, fill = NA))  
    
    
    
    total_zone_percent <- round(sum(master$strikezone == 1) / nrow(master) * 100, 1)
    total_chase_percent <- round(sum((master$strikezone == 0) & (master$PitchCall %in% c("StrikeSwinging", "FoulBall", "FoulBallFieldable", "FoulBallNotFieldable"))) / sum(master$strikezone == 0) * 100, 1)
    total_whiff_percent <- round(sum(master$PitchCall %in% c("StrikeSwinging")) / sum(master$PitchCall %in% c("StrikeSwinging", "InPlay", "FoulBall", "FoulBallFieldable", "FoulBallNotFieldable")) * 100, 1)
    
    
    hit_model_data <- master %>% 
      filter(PitchCall == "InPlay") %>% 
      select(PlayResult, ExitSpeed, Angle) 
    
    hit_pred <- predict(hit_model, hit_model_data, type = "prob")
    
    master <- master %>%
      mutate(
        xwOBA = ifelse(PitchCall == "InPlay",
                       (hit_pred$Single * 0.89 +
                          hit_pred$Double * 1.27 +
                          hit_pred$Triple * 1.62 +
                          hit_pred$HomeRun * 2.10),
                       NA_real_)
      )
    
    
    total <- length(master$PitchofPA)
    pitch_profile <- master %>% 
      group_by("Pitch" = TaggedPitchType) %>% 
      summarise(Count = n(),
                'Pitch%' = paste0(format(round(n() / total * 100,1),1),'%'),
                'aEV' = round(mean(ExitSpeed[PitchCall == "InPlay" & TaggedHitType != "Bunt"], na.rm = TRUE), 1),
                'Velo' = round(mean(RelSpeed, na.rm = TRUE), 1),
                'iVB' = round(mean(InducedVertBreak, na.rm = TRUE), 1),
                'HB' = round(mean(HorzBreak, na.rm = TRUE), 1),
                'Spin' = round(mean(SpinRate, na.rm = TRUE), 0),
                'VAA' = round(mean(VertApprAngle, na.rm = TRUE), 1),
                'HAA' = round(mean(HorzApprAngle, na.rm = TRUE), 1),
                'VRel' = round(mean(VertRelAngle, na.rm = TRUE), 1),
                'hRel' = round(mean(HorzRelAngle, na.rm = TRUE), 1),
                'Ext.' = round(mean(Extension, na.rm = TRUE), 1),
                'Tilt' = paste0(as.integer(mean(time_minutes, na.rm = TRUE)/ 60), ":", as.integer(mean(time_minutes, na.rm = TRUE)) %% 60),
                'Zone%' = round(sum(strikezone == 1) /n() * 100, 1),
                'Chase%' = round(sum((strikezone == 0) & (PitchCall %in% c("StrikeSwinging", "FoulBall", "FoulBallFieldable", "FoulBallNotFieldable"))) / sum(strikezone == 0) * 100, 1),
                'Whiff%' = round(sum(PitchCall %in% c("StrikeSwinging")) / sum(PitchCall %in% c("StrikeSwinging", "InPlay", "FoulBall", "FoulBallFieldable", "FoulBallNotFieldable")) * 100, 1),
                'RV' = round(sum(RV, na.rm = TRUE),1), 
                'xwOBA Contact' = round(mean(xwOBA[PitchCall=="InPlay"], na.rm = TRUE), 3),
                'Stuff+' = round(mean(Tilt, na.rm = TRUE), 3),
      ) %>% 
      arrange(desc(Count))
    
    
    
    
    
    total_count <- sum(pitch_profile$Count)
    all_row <- tibble(
      Pitch = "All",
      Count = total_count,
      'Pitch%' = paste0(format(round(total_count / total * 100, 1), 1), '%'),
      'aEV' = round(mean(master$ExitSpeed[master$PitchCall == "InPlay" & master$TaggedHitType != "Bunt"], na.rm = TRUE), 1),
      Velo = NA,
      iVB = NA,
      HB = NA,
      Spin = NA,
      VAA = NA,
      HAA = NA,
      VRel = NA,
      hRel = NA,
      'Ext.' = round(mean(master$Extension, na.rm = TRUE), 1),
      Tilt = NA,
      'Zone%' = total_zone_percent,
      'Chase%' = total_chase_percent,
      'Whiff%' = total_whiff_percent,
      'xwOBA Contact' = round(mean(master$xwOBA[master$PitchCall=="InPlay"], na.rm = TRUE), 3),
      'RV' = NA,
      'Stuff+' = NA,
    )
    
    pitch_profile <- bind_rows(pitch_profile, all_row)
    
    single_game_usage_data <- master %>%
      group_by(TaggedPitchType) %>%
      summarise(count = n()) %>%
      mutate(
        total = sum(count),
        percent = count / total * 100
      ) %>%
      arrange(desc(percent))  
    
    
    single_usage_graph <- ggplot(single_game_usage_data, aes(x = reorder(TaggedPitchType, percent), y = percent, fill = TaggedPitchType)) +
      geom_bar(stat = "identity", width = 0.3) +  # Remove the manual fill color to use mapped colors
      coord_flip() +  # Flip coordinates to make it horizontal
      theme_minimal() +  # Use a minimal theme
      theme(
        axis.title.y = element_blank(),
        axis.title.x = element_text(size = 12),
        axis.text.y = element_text(size = 12),
        axis.text.x = element_text(size = 12),
        plot.title = element_text(hjust = 0.5)
      ) +
      geom_text(aes(label = paste0(round(percent, 1), "%")), hjust = -0.3, color = "black", size = 5) +
      labs(y = "Percentage (%)") +
      scale_y_continuous(expand = expansion(mult = c(0, 0.1))) +  # Adjust the y-axis to make room for labels
      pitch_colors_fill 
    
    
    usage_graph <- ggplot(usage_graph_data, mapping = aes(x = Date, y = rolling_percent, color = TaggedPitchType)) + 
      geom_line(size = 1) + 
      geom_point(size = 1) + 
      pitch_colors +  # Apply the color palette for lines and points
      theme_bw() + 
      labs(title = "", x = "Date", y = "Percentage (%)", color = "Pitch")
    
    velocity_distribution_plot <- function(data) {
      
      items_in_order <- data %>%
        group_by(TaggedPitchType) %>%
        summarise(count = n()) %>%
        arrange(desc(count)) %>%
        pull(TaggedPitchType)
      
      ggplot(data, aes(x = RelSpeed, y = fct_relevel(TaggedPitchType, rev(items_in_order)), fill = TaggedPitchType)) +
        geom_density_ridges_gradient(scale = 3, rel_min_height = 0.01, alpha = 0.7) +
        pitch_colors_fill +  # Apply the fill color palette
        labs(title = "Pitch Velo Distribution", x = "Velocity (mph)", y = NULL) +
        theme_minimal() +
        theme(
          axis.title.y = element_blank(), 
          axis.text.y = element_text(hjust = 1, size = 12),  # Align pitch type labels to the left
          axis.ticks.y = element_blank(), 
          legend.position = "none",
          plot.title = element_text(hjust = 0.5, size = 20),
          text = element_text(size = 14)  # Improve text clarity
        ) +
        geom_vline(data = data %>% group_by(TaggedPitchType) %>% summarise(mean_speed = mean(RelSpeed, na.rm = TRUE)),
                   aes(xintercept = mean_speed), color = "black", linetype = "dashed") +
        facet_wrap(~ TaggedPitchType, ncol = 1, scales = "free_y") +
        scale_y_discrete(labels = NULL)
    }
    
    
    
    
    
    output$velocity_distribution <- renderPlot({
      filtered_data <- master %>%
        filter(Pitcher == input$Pitcher_Input & Season == input$Season_Input)
      
      velocity_distribution_plot(filtered_data)
    })
    
    output$season_stat_sum <- renderReactable({
      reactable(
        season_stat_sum,
        columns = list(
          IP = colDef(name = "IP", align = "center"),
          WHIP = colDef(name = "WHIP", align = "center"),
          ERA = colDef(name = "ERA", align = "center"),
          FIP = colDef(name = "FIP", align = "center"),
          PA = colDef(name = "PA", align = "center"),
          `K%` = colDef(name = "K%", align = "center"),
          `BB%` = colDef(name = "BB%", align = "center"),
          `K - BB%` = colDef(name = "K – BB%", align = "center")
        ),
        bordered = TRUE,
        striped = FALSE,
        highlight = TRUE
      )
    })
    
    
    
    
    
    
    
    
    output$usage_graph <- renderPlot({
      
      if (input$Game_Select_Inputt == "All") {
        usage_graph  
      } else {
        NULL  
      }
    })
    
    output$single_usage_graph <- renderPlot({
      
      if (input$Game_Select_Inputt != "All") {
        single_usage_graph  
      } else {
        NULL  
      }
    })
    
    output$pitch_profile <- renderReactable({
      
      color_scale <- function(value, avg, high_good = TRUE, sensitivity = 0.5, max_value = 100) {
        if (is.na(value)) {
          return("white")
        }
        
        sensitivity_scale <- function(x, avg, sensitivity, max_value) {
          return((x - avg) / (max_value - avg) * 100 * sensitivity)
        }
        
        if (high_good) {
          if (value > avg) {
            scale <- sensitivity_scale(value, avg, sensitivity, max_value)
            color <- colorRampPalette(c("white", "red"))(100)[min(100, max(1, round(scale)))]
          } else if (value < avg) {
            scale <- sensitivity_scale(avg, value, sensitivity, max_value)
            color <- colorRampPalette(c("white", "blue"))(100)[min(100, max(1, round(scale)))]
          } else {
            color <- "white"
          }
        } else {
          if (value < avg) {
            scale <- sensitivity_scale(avg, value, sensitivity, max_value)
            color <- colorRampPalette(c("white", "red"))(100)[min(100, max(1, round(scale)))]
          } else if (value > avg) {
            scale <- sensitivity_scale(value, avg, sensitivity, max_value)
            color <- colorRampPalette(c("white", "blue"))(100)[min(100, max(1, round(scale)))]
          } else {
            color <- "white"
          }
        }
        
        return(color)
      }
      
      
      reactable(
        pitch_profile,
        columns = list(
          Pitch = colDef(
            name = "Pitch",
            align = "center",
            style = function(value) {
              color <- switch(value,
                              "Fastball" = "red",
                              "Curveball" = "navy",
                              "ChangeUp" = "orchid",
                              "Splitter" = "lightblue",
                              "Slider" = "orange",
                              "Sinker" = "darkgreen",
                              "Cutter" = "brown",
                              "white" 
              )
              list(background = color, color = ifelse(value == "Splitter", "black", "white"))
            }
          ),
          Count = colDef(name = "Count", align = "center"),
          `Pitch%` = colDef(name = "Pitch%", align = "center"),
          `aEV` = colDef(
            name = "aEV",
            align = "center",
            style = function(value) {
              list(background = color_scale(value, 81, high_good = FALSE))
            }
          ),
          Velo = colDef(name = "Velo", align = "center"),
          iVB = colDef(name = "iVB", align = "center"),
          HB = colDef(name = "HB", align = "center"),
          Spin = colDef(name = "Spin", align = "center"),
          VAA = colDef(name = "VAA", align = "center"),
          HAA = colDef(name = "HAA", align = "center"),
          VRel = colDef(name = "VRel", align = "center"),
          hRel = colDef(name = "hRel", align = "center"),
          Ext. = colDef(name = "Ext.", align = "center"),
          Tilt = colDef(name = "Tilt", align = "center"),
          `Stuff+` = colDef(name = "Stuff+", align = "center"),
          `Zone%` = colDef(
            name = "Zone%",
            align = "center",
            style = function(value) {
              list(background = color_scale(value, 48.7, high_good = TRUE))
            }
          ),
          `Chase%` = colDef(
            name = "Chase%",
            align = "center",
            style = function(value) {
              list(background = color_scale(value, 28.5, high_good = TRUE))
            }
          ),
          `Whiff%` = colDef(
            name = "Whiff%",
            align = "center",
            style = function(value) {
              list(background = color_scale(value, 24.9, high_good = TRUE))
            }
          ),
          `xwOBA Contact` = colDef(
            name = "xwOBA Contact",
            align = "center",
            style = function(value) {
              list(background = color_scale(value, 0.315, high_good = FALSE, max_value = 0.800))
            }
          ),
          RV = colDef(name = "RV", align = "center", style = function(value){
            list(background = color_scale(value, 0, high_good = TRUE, max_value = 10)) 
          })
        ),
        bordered = TRUE,
        striped = FALSE,
        highlight = TRUE,
        defaultPageSize = 15,
        showPageSizeOptions = TRUE,
        pageSizeOptions = c(5, 10, 15)
      )
    })
    
  })
  
  
  
  
  
  
  
  
  batter_report <- master
  
  
  
  observeEvent(input$Season_Select_Input,{
    updateSelectInput(session,
                      inputId = "Batter_Select_Input",
                      label = "Select Batter",
                      choices = sort(as.character(unique(batter_report$Batter[input$Season_Select_Input == batter_report$Season & master$BatterTeam %in% c("MIC_SPA", "MIC_PRA") & batter_report$Batter != ""])))
    )
    
    updateSelectInput(session,
                      inputId = "Game_Select_Input",
                      label = "Select Game",
                      choices = rev(sort(unique(batter_report$Date[input$Season_Select_Input == batter_report$Season & batter_report$Batter == input$Batter_Select_Input])))
    )
    
    
    
  })
  
  observeEvent(input$Batter_Select_Input,{
    updateSelectInput(session,
                      inputId = "Game_Select_Input",
                      label = "Select Game",
                      choices = rev(sort(unique(batter_report$Date[input$Season_Select_Input == batter_report$Season & batter_report$Batter == input$Batter_Select_Input]))))
  })
  
  
  # Reactive expressions to capture the selected batter and game date
  selected_batter <- reactive({
    req(input$Batter_Select_Input)
    input$Batter_Select_Input
  })
  
  selected_game_date <- reactive({
    req(input$Game_Select_Input)
    input$Game_Select_Input
  })
  
  # Render the text outputs in the UI
  output$selected_batter <- renderText({
    selected_batter()
  })
  
  output$selected_game_date <- renderText({
    selected_game_date()
  })
  
  
  ###################### start of mapping & SD ######################
  observeEvent(c(input$Game_Select_Input,input$Batter_Select_Input),{
    
    
    batter_report <- batter_report %>% 
      mutate(Count = paste0(Balls,"-",Strikes),
             Swing = (ifelse(PitchCall == "FoulBall" | PitchCall == "StrikeSwinging" | PitchCall == "InPlay" | PitchCall == "FoulBallNotFieldable" | PitchCall == "FoulBallFieldable", "Swing", "Take")),
             Zones = ifelse(PlateLocHeight >= 1.745 & PlateLocHeight <= 3.01 &
                              PlateLocSide >= (-0.83083)/2 & PlateLocSide <= (0.83083)/2,
                            "Heart", ifelse(
                              #bottom#
                              (PlateLocHeight >= 1.3775 & PlateLocHeight <= 1.745 & PlateLocSide >= -0.83083 & PlateLocSide <= 0.83083) |
                                # top 
                                (PlateLocHeight >= 3.01 & PlateLocHeight <= 3.3775 & PlateLocSide >= -0.83083 & PlateLocSide <= 0.83083) |
                                # left
                                (PlateLocHeight >= 1.3775 & PlateLocHeight <= 3.3775 & PlateLocSide >= -0.83083 & PlateLocSide <= (-0.83083)/2) |
                                # right
                                (PlateLocHeight >= 1.3775 & PlateLocHeight <= 3.3775 & PlateLocSide >= (-0.83083)/2 & PlateLocSide <= 0.83083),
                              "Zone", ifelse(
                                #bottom
                                (PlateLocHeight >= 1.255 & PlateLocHeight <= 1.3775 & PlateLocSide >= -0.9975 & PlateLocSide <= 0.9975) |
                                  # top
                                  (PlateLocHeight >= 3.3775 & PlateLocHeight <= 3.5 & PlateLocSide >= -0.9975 & PlateLocSide <= 0.9975) |
                                  # left
                                  (PlateLocHeight >= 1.255 & PlateLocHeight <= 3.5 & PlateLocSide >= -0.9975 & PlateLocSide <= -0.83083) |
                                  # right
                                  (PlateLocHeight >= 1.255 & PlateLocHeight <= 3.5 & PlateLocSide >= 0.83083 & PlateLocSide <= 0.9975),
                                "Shadow", ifelse(
                                  #bottom
                                  (PlateLocHeight >= .785 & PlateLocHeight <= 1.255 & PlateLocSide >= -1.4418 & PlateLocSide <= 1.4418) |
                                    # top
                                    (PlateLocHeight >= 3.5 & PlateLocHeight <= 3.8675 & PlateLocSide >= -1.4418 & PlateLocSide <= 1.4418) |
                                    # left
                                    (PlateLocHeight >= .785 & PlateLocHeight <= 3.8675 & PlateLocSide >= -1.4418 & PlateLocSide <= -0.8305) |
                                    # right
                                    (PlateLocHeight >= .785 & PlateLocHeight <= 3.8675 & PlateLocSide >= 0.8305 & PlateLocSide <= 1.4418),
                                  "Chase", "Waste"))))) %>% 
      mutate(SD_Score = 
               ifelse((Swing == "Take" & Zones == "Heart" & Count == "0-0" & TaggedPitchType %in% c("Curveball", "Slider")),-2.25,
                      ifelse((Swing == "Take" & Zones == "Zone" & Count == "0-0" & TaggedPitchType %in% c("Curveball", "Slider")),-2,
               ifelse((Swing == "Swing" & Zones == "Waste") | (Count == "3-2" & Swing == "Take" & Zones == "Heart") | (Swing == "Take" & Count == "2-2" & Zones == "Heart") | (Swing == "Take" & Zones == "Heart" & Count == "1-1") | (Swing == "Take" & Zones == "Heart" & Count == "1-2") | (Swing == "Take" & Zones == "Heart" & Count == "0-2"),-5, 
                               ifelse(Swing == "Take" & ((Count == "3-2" & Zones == "Zone") | (Zones == "Heart" & Count == "3-1") | (Zones == "Zone" & Count == "2-2") | (Zones == "Zone" & Count == "1-2") | (Zones == "Zone" & Count == "0-2") | Zones == "Heart" & Count == "0-0"),-4.5,
                                      ifelse((Swing == "Swing" & Zones == "Chase" & Count == "3-0") | (Swing == "Take" & ((Zones == "Zone" & Count == "0-0") | (Zones == "Heart" & Count == "0-1") | (Zones == "Heart" & Count == "1-0") | (Zones == "Zone" & Count == "1-1") | (Zones == "Heart" & Count == "2-1") | (Zones == "Zone" & Count == "3-1"))),-4,
                                             ifelse(Swing == "Take" & ((Zones == "Zone" & Count == "1-0") | (Zones == "Zone" & Count == "0-1") | (Zones == "Heart" & Count == "2-0") | (Zones == "Zone" & Count == "2-1")), -3.5, 
                                                    ifelse((Swing == "Take" & (Zones == "Zone" & Count == "2-0")) | (Swing == "Swing" & ((Zones == "Chase" & Count == "3-1") | (Zones == "Shadow" & Count == "3-0") | (Zones == "Chase" & Count == "2-0"))), -3,
                                                           ifelse(Swing == "Swing" & (Zones == "Chase" & Count == "3-2" | (Zones == "Chase" & Count == "1-0")),-2.5,
                                                                  ifelse(Swing == "Swing" & ((Zones == "Chase" & Count == "0-0") | (Zones == "Chase" & Count == "0-1") | (Zones == "Chase" & Count == "1-1") | (Zones == "Chase" & Count == "2-2")),-2,
                                                                         ifelse(Swing == "Swing" & Zones == "Chase" & Count == "2-1",-1.5,
                                                                                ifelse(Swing == "Swing" & ((Zones == "Chase" & Count == "0-2") | (Zones == "Chase" & Count == "1-2")),-1,
                                                                                       ifelse(Swing == "Take" & (Zones == "Shadow" & Count == "0-2") | (Zones == "Shadow" & Count == "1-2") | (Zones == "Shadow" & Count == "2-2"),-0.5,
                                                                                              ifelse((Swing == "Swing" & (Zones == "Shadow" & Count == "0-0")|(Zones == "Shadow" & Count == "0-1") | (Zones == "Shadow" & Count == "1-0") | (Zones == "Zone" & Count == "3-0")) | (Swing == "Take" & ((Zones == "Shadow" & Count == "1-1") | (Zones == "Zone" & Count == "3-0") | (Zones == "Heart" & Count == "3-0") | (Zones == "Shadow" & Count == "3-1") | (Zones == "Shadow" & Count == "3-2") )),0, 
                                                                                                     ifelse((Swing == "Swing" & ((Zones == "Shadow" & Count == "3-2") | (Zones == "Heart" & Count == "3-0") | (Zones == "Shadow" & Count == "1-1"))) | (Swing == "Take" & Zones == "Shadow" & Count == "2-1"),0.5,
                                                                                                            ifelse((Swing == "Swing" & Zones == "Shadow" & Count == "3-1" | (Swing == "Take" & ((Zones == "Chase" & Count == "3-1") | (Zones == "Waste" & Count == "3-1") | (Zones == "Waste" & Count == "3-0") | (Zones == "Waste" & Count == "2-1") | (Zones == "Chase" & Count == "2-0") | (Zones == "Shadow" & Count == "2-0") | (Zones == "Waste" & Count == "2-0") | (Zones == "Waste" & Count == "1-1") | (Zones == "Chase" & Count == "0-1") | (Zones == "Chase" & Count == "1-0") | (Zones == "Shadow" & Count == "1-0") | (Zones == "Waste" & Count == "1-0") | (Zones == "Chase" & Count == "0-1") | (Zones == "Shadow" & Count == "0-1") | (Zones == "Chase" & Count == "2-0") | (Zones == "Waste" & Count == "0-1") | (Zones == "Chase" & Count == "0-0") | (Zones == "Shadow" & Count == "0-0")  | (Zones == "Waste" & Count == "0-0")))),1,
                                                                                                                   ifelse((Swing == "Swing" & ((Zones == "Shadow" & Count == "0-2") | (Zones == "Shadow" & Count == "1-0") | (Zones == "Shadow" & Count == "1-2") | (Zones == "Shadow" & Count == "2-1") | (Zones == "Shadow" & Count == "2-2"))) | (Swing == "Take" & (Zones == "Chase" & Count == "0-2") | (Zones == "Waste" & Count == "0-2") | (Zones == "Waste" & Count == "1-2") | (Zones == "Chase" & Count == "1-2") | (Zones == "Chase" & Count == "2-1") | (Zones == "Waste" & Count == "2-2") | (Zones == "Chase" & Count == "0-1")  | (Zones == "Waste" & Count == "3-2")),1.5,
                                                                                                                          ifelse((Swing == "Take" & ((Zones == "Chase" & Count == "3-2") | (Zones == "Chase" & Count == "2-2") | (Zones == "Chase" & Count == "1-1"))),2,
                                                                                                                                 ifelse((Swing == "Swing" & Zones == "Shadow" & Count == "2-0") | (Swing == "Take" & Zones == "Chase" & Count == "3-0"),2.5,
                                                                                                                                        ifelse((Swing == "Swing" & Zones == "Zone" & Count == "0-1") | (Swing == "Take" & Zones == "Shadow" & Count == "3-0"),3.5,
                                                                                                                                               ifelse(Swing == "Swing" & ((Zones == "Zone" & Count == "0-0") | (Zones == "Zone" & Count == "1-0") | (Zones == "Zone" & Count == "1-1")),4,
                                                                                                                                                      ifelse(Swing == "Swing" & ((Zones == "Zone" & Count == "0-2") | (Zones == "Zone" & Count == "1-2") | (Zones == "Zone" & Count == "2-0") | (Zones == "Zone" & Count == "2-1") | (Zones == "Zone" & Count == "2-2") | (Zones == "Zone" & Count == "3-2")),4.5,
                                                                                                                                                             ifelse(Swing == "Swing" & ((Zones == "Heart" & Count == "3-2") | (Zones == "Heart" & Count == "3-1") | (Zones == "Zone" & Count == "3-1") | (Zones == "Heart" & Count == "2-2") | (Zones == "Heart" & Count == "2-1") | (Zones == "Heart" & Count == "2-0") | (Zones == "Heart" & Count == "1-2") | (Zones == "Heart" & Count == "1-1") | (Zones == "Heart" & Count == "1-0") | (Zones == "Heart" & Count == "0-2") | (Zones == "Heart" & Count == "0-1") | (Zones == "Heart" & Count == "0-0")),5,NA
                                                                                                                                                             )))))))))))))))))))))))
    
    
    batter_report <- batter_report %>% 
    mutate(ball_or_strike = case_when(
      (PitchCall == "FoulBall" | PitchCall == "FoulBallNotFieldable" | PitchCall == "FoulBallFieldable") & Strikes == 2 ~ NA_character_,
      PitchCall == "StrikeCalled" | PitchCall == "StrikeSwinging" | PitchCall == "FoulBall" | PitchCall == "FoulBallNotFieldable" | PitchCall == "FoulBallFieldable" ~ "Strike",
      PitchCall == "BallCalled" ~ "Ball",
      TRUE ~ NA_character_
    ),
    count = paste0(Balls, "-", Strikes)
    ) %>% 
      mutate(RV = case_when(
        count == "3-0" & ball_or_strike == "Ball" ~ 0.051,
        count == "3-0" & ball_or_strike == "Strike" ~ -0.117,
        count == "3-1" & ball_or_strike == "Ball" ~ 0.168,
        count == "3-1" & ball_or_strike == "Strike" ~ -0.066,
        count == "2-0" & ball_or_strike == "Ball" ~ 0.143,
        count == "2-0" & ball_or_strike == "Strike" ~ -0.062,
        count == "3-2" & ball_or_strike == "Ball" ~ 0.234,
        count == "3-2" & ball_or_strike == "Strike" ~ -0.294,
        count == "1-0" & ball_or_strike == "Ball" ~ 0.088,
        count == "1-0" & ball_or_strike == "Strike" ~ -0.035,
        count == "2-1" & ball_or_strike == "Ball" ~ 0.064,
        count == "2-1" & ball_or_strike == "Strike" ~ -0.069,
        count == "0-0" & ball_or_strike == "Ball" ~ 0.032,
        count == "0-0" & ball_or_strike == "Strike" ~ -0.037,
        count == "1-1" & ball_or_strike == "Ball" ~ 0.048,
        count == "1-1" & ball_or_strike == "Strike" ~ -0.054,
        count == "2-2" & ball_or_strike == "Ball" ~ 0.085,
        count == "2-2" & ball_or_strike == "Strike" ~ -0.209,
        count == "0-1" & ball_or_strike == "Ball" ~ 0.024,
        count == "0-1" & ball_or_strike == "Strike" ~ -0.051,
        count == "1-2" & ball_or_strike == "Ball" ~ 0.038,
        count == "1-2" & ball_or_strike == "Strike" ~ -0.171,
        count == "0-2" & ball_or_strike == "Ball" ~ 0.021,
        count == "0-2" & ball_or_strike == "Strike" ~ -0.150,
        count == "3-0" & TaggedHitType == "GroundBall" ~ -0.314,
        count == "3-0" & TaggedHitType == "LineDrive" ~ 0.045,
        count == "3-0" & TaggedHitType == "FlyBall" ~ -0.212,
        count == "3-1" & TaggedHitType == "GroundBall" ~ -0.197,
        count == "3-1" & TaggedHitType == "LineDrive" ~ 0.162,
        count == "3-1" & TaggedHitType == "FlyBall" ~ -0.095,
        count == "2-0" & TaggedHitType == "GroundBall" ~ -0.171,
        count == "2-0" & TaggedHitType == "LineDrive" ~ 0.188,
        count == "2-0" & TaggedHitType == "FlyBall" ~ -0.069,
        count == "3-2" & TaggedHitType == "GroundBall" ~ -0.131,
        count == "3-2" & TaggedHitType == "LineDrive" ~ 0.228,
        count == "3-2" & TaggedHitType == "FlyBall" ~ -0.029,
        count == "1-0" & TaggedHitType == "GroundBall" ~ -0.109,
        count == "1-0" & TaggedHitType == "LineDrive" ~ 0.250,
        count == "1-0" & TaggedHitType == "FlyBall" ~ -0.007,
        count == "2-1" & TaggedHitType == "GroundBall" ~ -0.107,
        count == "2-1" & TaggedHitType == "LineDrive" ~ 0.252,
        count == "2-1" & TaggedHitType == "FlyBall" ~ -0.005,
        count == "0-0" & TaggedHitType == "GroundBall" ~ -0.074,
        count == "0-0" & TaggedHitType == "LineDrive" ~ 0.285,
        count == "0-0" & TaggedHitType == "FlyBall" ~ 0.028,
        count == "1-1" & TaggedHitType == "GroundBall" ~ -0.061,
        count == "1-1" & TaggedHitType == "LineDrive" ~ 0.298,
        count == "1-1" & TaggedHitType == "FlyBall" ~ 0.041,
        count == "2-2" & TaggedHitType == "GroundBall" ~ -0.046,
        count == "2-2" & TaggedHitType == "LineDrive" ~ 0.313,
        count == "2-2" & TaggedHitType == "FlyBall" ~ 0.056,
        count == "0-1" & TaggedHitType == "GroundBall" ~ -0.038,
        count == "0-1" & TaggedHitType == "LineDrive" ~ 0.321,
        count == "0-1" & TaggedHitType == "FlyBall" ~ 0.064,
        count == "1-2" & TaggedHitType == "GroundBall" ~ -0.008,
        count == "1-2" & TaggedHitType == "LineDrive" ~ 0.351,
        count == "1-2" & TaggedHitType == "FlyBall" ~ 0.094,
        count == "0-2" & TaggedHitType == "GroundBall" ~ 0.013,
        count == "0-2" & TaggedHitType == "LineDrive" ~ 0.372,
        count == "0-2" & TaggedHitType == "FlyBall" ~ 0.115,
        TRUE ~ NA
      ))
    
    
    
    
    team_hard_hit_data <- batter_report %>% 
      filter(Season == input$Season_Select_Input)
    
    batter_report <- batter_report %>% 
      filter(Season == input$Season_Select_Input & Batter == input$Batter_Select_Input)
    
    hit_model_data <- batter_report %>% 
      filter(PitchCall == "InPlay") %>% 
      select(PlayResult, ExitSpeed, Angle, Date)
    
    
    hit_pred <- predict(hit_model, hit_model_data, type = "prob")
    
    
    master$strikezone <- ifelse(
      (master$PlateLocHeight >= 1.378) & (master$PlateLocHeight <= 3.622) &
        (master$PlateLocSide >= -0.83) & (master$PlateLocSide <= 0.83), 1, 0
    )
    
    
    ####################### season stats ######################
    season_stats <- batter_report %>% 
      summarize(Season = input$Season_Select_Input,
                #BA = format(round(length(PlayResult[PlayResult == "Single" | PlayResult == "Double" | PlayResult == "Triple" | PlayResult == "HomeRun"]) / (length(PlayResult[PlayResult == "Single" | PlayResult == "Double" | PlayResult == "Triple" | PlayResult == "HomeRun" | PlayResult == "Out"]) + length(KorBB[KorBB == "Strikeout"])),3),3),
                'SD+' =  as.integer(sum(SD_Score, na.rm = TRUE) / n() * 100 / .93),
                'HH% (#)' = paste0(format(round(length(PitchCall[PitchCall == "InPlay" & ExitSpeed >= 90 & TaggedHitType != "Bunt"]) / length(PitchCall[PitchCall == "InPlay" & TaggedHitType != "Bunt"]) * 100,1),1),"%", " (",length(PitchCall[PitchCall == "InPlay" & ExitSpeed >= 90 & TaggedHitType != "Bunt"]),")" ),
                'Team HH% (#)' = paste0(format(round(length(team_hard_hit_data$PitchCall[team_hard_hit_data$PitchCall == "InPlay" & team_hard_hit_data$ExitSpeed >= 90 & team_hard_hit_data$TaggedHitType != "Bunt"]) / length(team_hard_hit_data$PitchCall[team_hard_hit_data$PitchCall == "InPlay" & team_hard_hit_data$TaggedHitType != "Bunt"]) * 100,1),1),"%", " (",length(team_hard_hit_data$PitchCall[team_hard_hit_data$PitchCall == "InPlay" & team_hard_hit_data$ExitSpeed >= 90 & team_hard_hit_data$TaggedHitType != "Bunt"]),")" ),
                #wOBA = format(round((length(KorBB[KorBB == "Walk"])*.69 + length(PitchCall[PitchCall == "HitByPitch"])*.72 + length(PlayResult[PlayResult == "Single"])*.89 + length(PlayResult[PlayResult == "Double"])*1.27 + length(PlayResult[PlayResult == "Triple"])*1.62 + length(PlayResult[PlayResult == "HomeRun"])*2.1)/(length(PlayResult[PlayResult == "Single" | PlayResult == "Double" | PlayResult == "Triple" | PlayResult == "HomeRun" | PlayResult == "Out" | PlayResult == "FieldersChoice"]) + length(KorBB[KorBB == "Strikeout" | KorBB == "Walk"]) + length(PitchCall[PitchCall == "HitByPitch"])), 3), 3),
                #xwOBA = as.numeric(format(round((length(KorBB[KorBB == "Walk"])*.69 + length(PitchCall[PitchCall == "HitByPitch"])*.72 + sum(hit_pred$Single)*.89 + sum(hit_pred$Double)*1.27 + sum(hit_pred$Triple)*1.62 + sum(hit_pred$HomeRun)*2.1)/(length(PlayResult[PlayResult == "Single" | PlayResult == "Double" | PlayResult == "Triple" | PlayResult == "HomeRun" | PlayResult == "Out" | PlayResult == "FieldersChoice"]) + length(KorBB[KorBB == "Strikeout" | KorBB == "Walk"]) + length(PitchCall[PitchCall == "HitByPitch"])), 3), 3)),
                #'xwRC/PA' = format(round((xwOBA - .378) / 1.25 + .16 ,3),3),
                #"Chase%" = paste0(as.integer(length(Swing[Swing == "Swing" & (PlateLocSide > 0.9975 | PlateLocSide  < -0.9975 | PlateLocHeight < 1.255 | PlateLocHeight > 3.5)]) / length(Swing[PlateLocSide > 0.9975 | PlateLocSide  < 0.9975 | PlateLocHeight < 1.255 | PlateLocHeight > 3.5]) * 100),"%"),
                "Zone Whiff%" = paste0(format(round(length(PitchCall[PitchCall == "StrikeSwinging" & (Zones == "Heart" | Zones == "Zone")]) / length(Swing[Swing == "Swing" & (Zones == "Heart" | Zones == "Zone")]) * 100, 2), nsmall = 2), "%"),
                #"1P-Str Swing%" = paste0(as.integer(length(PitchofPA[PitchofPA == 1 & Swing == "Swing" & (Zones == "Heart" | Zones == "Zone")]) / length(PitchofPA[PitchofPA == 1 & (Zones == "Heart" | Zones == "Zone")]) * 100),"%"),
                #"2-Str Chase%" = paste0(as.integer(length(Swing[Swing == "Swing" & Strikes == 2 & (Zones == "Chase" | Zones == "Waste")]) / length(Strikes[Strikes == 2 & (Zones == "Waste" | Zones == "Chase")]) * 100),"%"),
                'RV' = round(sum(RV, na.rm = TRUE),1), 
      )
    
    
    
    
    
    
    ###################### heat map ######################
    
    heat_map_data <- batter_report %>% 
      mutate(HardHit = ifelse(ExitSpeed >= 90,1,0)) %>% 
      filter(PitchCall == "InPlay" & TaggedHitType != "Bunt")
    
    heat_map <- ggplot(heat_map_data, aes(x = -PlateLocSide, y = PlateLocHeight, fill = HardHit)) + 
      stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
      scale_fill_gradient(low = "blue", high = "red") +
      geom_segment(aes(x = -0.7083, y = 0.3, xend = 0, yend = 0), size = 1, color = "black") +
      geom_segment(aes(x = 0, y = 0, xend = 0.7083, yend = 0.3), size = 1, color = "black") +
      geom_segment(aes(x = -0.7083, y = 0.3, xend = -0.7083, yend = 0.5), size = 1, color = "black") + 
      geom_segment(aes(x = -0.7083, y = 0.5, xend = 0.7083, yend = 0.5), size = 1, color = "black") +
      geom_segment(aes(x = 0.7083, y = 0.3, xend = 0.7083, yend = 0.5), size = 1, color = "black") +
      geom_segment(aes(x = -0.9975,xend = 0.9975,y = 1.255,yend = 1.255),size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = -0.9975,xend = 0.9975,y = 3.5,yend = 3.5), size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = 0.9975,xend = 0.9975,y = 1.255,yend = 3.5), size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = -0.9975,xend = -0.9975,y = 1.255,yend = 3.5), size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = -0.83083, xend = 0.83083, y = 1.3775, yend = 1.3775), size = .5, color = "black") +
      geom_segment(aes(x = -0.83083, xend = 0.83083, y = 3.3775, yend = 3.3775), size = .5, color = "black") +
      geom_segment(aes(x = -0.83083, xend = -0.83083, y = 1.3775, yend = 3.3775), size = .5, color = "black") +
      geom_segment(aes(x = 0.83083, xend = 0.83083, y = 1.3775, yend = 3.3775), size = .5, color = "black") +
      theme_bw() + xlim(-3, 3) + ylim(0, 5) + 
      labs(x = "", y = "", fill = "EV 90+%", title = paste("BIP", input$Season_Select_Input)) + 
      theme(
        legend.text = element_text(size = 11),  
        legend.title = element_text(size = 12),  
        axis.text = element_text(size = 11),    
        axis.title = element_text(size = 11)     
      )
    
    batter_report <- batter_report %>% 
      filter(Date == input$Game_Select_Input)
    
    hit_model_data <- hit_model_data %>% 
      filter(Date == input$Game_Select_Input)
    
    ####################### at bats loop ######################  
    
    atbats <- numeric(length(batter_report$PitchNo))
    atbat <- 0
    for (i in seq_along(batter_report$PitchNo)) {
      if (batter_report$PitchofPA[i] == 1) {
        atbat <- atbat + 1
      }
      atbats[i] <- atbat
    }
    batter_report$AtBat <- atbats
    
    ###################### result ######################
    
    batter_report <- batter_report %>% 
      mutate(
        hit_type = case_when(
          TaggedHitType == "LineDrive" ~ "Line Drive",
          TaggedHitType == "FlyBall" ~ "Fly Ball",
          TaggedHitType == "GroundBall" ~ "Ground Ball",
          TaggedHitType == "Popup" ~ "Pop Up",
          TaggedHitType == "Undefined" ~ "-",
          TaggedHitType == "Bunt" ~ "Bunt",
          TaggedHitType == "Sacrifice" ~ "Sacrifice"
        ),
        
        pitch_result = case_when(
          PitchCall == "BallCalled" ~ "Ball",
          PitchCall == "BallinDirt" ~ "Ball",
          PitchCall == "StrikeCalled" ~ "Called Strike",
          PitchCall == "StrikeSwinging" ~ "Swinging Strike",
          PitchCall == "FoulBall" ~ "Foul Ball",
          PitchCall == "FoulBallNotFieldable" ~ "Foul Ball",
          PitchCall == "HitByPitch" ~ "HBP",
          PitchCall == "InPlay" ~ "In Play",
          PitchCall == "FoulBallFieldable" ~ "Foul Ball",
        ),
        
        play_result = case_when(
          PitchCall == "BallCalled" & KorBB == "Walk" ~ "Walk",
          PitchCall == "BallCalled" ~ "Ball",
          PitchCall == "BallinDirt" ~ "Ball",
          PitchCall == "StrikeCalled" & KorBB == "Strikeout" ~ "Looking Strikeout",
          PitchCall == "StrikeSwinging" & KorBB == "Strikeout" ~ "Swinging Strikeout",
          PitchCall == "StrikeCalled" ~ "Looking Strike",
          PitchCall == "StrikeSwinging" ~ "Strike Swinging",
          PitchCall == "FoulBall" ~ "Foul Ball",
          PitchCall == "FoulBallNotFieldable" ~ "Foul Ball",
          PitchCall == "FoulBallFieldable" ~ "Foul Ball",
          PitchCall == "HitByPitch" ~ "HBP",
          PitchCall == "InPlay" ~ PlayResult
          
        ),
        
      )
    
    
    
    
    batter_report <- batter_report %>% 
      group_by(AtBat) %>% 
      mutate(ab = paste0("PA:", AtBat, " | ", last(play_result), " | EV: ",as.integer(last(ExitSpeed)), " | LA: ",as.integer(last(Angle)))) %>% 
      ungroup()
    
    ##################################### fix this bullshit im losing my god damn mind ############################################### 
    
    
    
    
    
    
    hit_model_data <- batter_report %>%
      filter(PitchCall == "InPlay") %>%
      select(PlayResult, ExitSpeed, Angle, Distance, Bearing, Date) %>%
      mutate(X = sin(Bearing * pi / 180) * Distance,
             Y = cos(Bearing * pi / 180) * Distance)
    
    hit_pred <- predict(hit_model, hit_model_data, type = "prob")
    
    batter_report <- batter_report %>%
      mutate(
        xwOBA = ifelse(PitchCall == "InPlay",
                       (hit_pred$Single * 0.89 +
                          hit_pred$Double * 1.27 +
                          hit_pred$Triple * 1.62 +
                          hit_pred$HomeRun * 2.10),
                       NA_real_)
      )
    
    xwOBA_table_data <- batter_report %>%
      group_by(AtBat) %>%
      summarize(
        PA = as.integer(last(AtBat)), 
        Pitcher = last(Pitcher),
        PitcherThrows = last(PitcherThrows),
        Inning = last(Inning),
        Outs = last(Outs),
        Result = last(play_result),
        xwOBA = sprintf("%.3f",last(xwOBA)),
        SD_plus = as.integer(mean(SD_Score, na.rm = TRUE) * 100 / .93)
      ) %>%
      ungroup() %>%
      select(-AtBat) %>% 
      separate(Pitcher, into = c("Last", "First"), sep = ", ") %>%
      unite(Pitcher , First, Last, sep = " ") %>% 
      mutate(PitcherThrows  = ifelse(PitcherThrows  == "Right", "RHP", "LHP")) %>%
      rename(Hand = PitcherThrows, "SD+" = SD_plus)
    
    
    
    ####################################################################################
    
    
    ###################### plate graph ###################### 
    
    
    shape_values <- c("In Play" = 8, "Called Strike" = 1, "Swinging Strike" = 19, "Foul Ball" = 13, "Ball" = 2, "HBP" = 3)
    color_values <- c("Fastball" = "darkgreen", "Slider" = "red", "ChangeUp" = "purple", "Curveball" = "orange", "Cutter" = "green", "Sinker" = "blue", "Splitter" = "lightblue", "KnuckleBall" = "black")
    
    
    plate_graph <- ggplot(batter_report, mapping = aes(x = -PlateLocSide, y = PlateLocHeight)) + geom_point(aes(color = TaggedPitchType, shape = pitch_result), size = 2.75, alpha = 3) +
      geom_text(aes(label = PitchofPA), vjust = -1, size = 4) +
      #Plate
      geom_segment(aes(x = -0.7083,y = 0.5,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = -0.7083,yend = 0.5),size = 1,color = "black") +
      #Zone
      geom_segment(aes(x = -0.9975,xend = 0.9975,y = 1.255,yend = 1.255),size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = -0.9975,xend = 0.9975,y = 3.5,yend = 3.5), size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = 0.9975,xend = 0.9975,y = 1.255,yend = 3.5), size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = -0.9975,xend = -0.9975,y = 1.255,yend = 3.5), size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = -0.83083, xend = 0.83083, y = 1.3775, yend = 1.3775), size = .5, color = "black") +
      geom_segment(aes(x = -0.83083, xend = 0.83083, y = 3.3775, yend = 3.3775), size = .5, color = "black") +
      geom_segment(aes(x = -0.83083, xend = -0.83083, y = 1.3775, yend = 3.3775), size = .5, color = "black") +
      geom_segment(aes(x = 0.83083, xend = 0.83083, y = 1.3775, yend = 3.3775), size = .5, color = "black") +
      #SD Zones
      geom_rect(aes(xmin = -3, xmax = 3, ymin = 0, ymax = 5, fill = "Waste"), alpha = .02, size = 1) +
      geom_rect(aes(xmin = -1.4418, xmax = 1.4418, ymin = .785, ymax = 3.8675, fill = "Chase"), alpha = .02, size = 1) +
      geom_rect(aes(xmin = -0.9975, xmax = 0.9975, ymin = 1.255, ymax = 3.5, fill = "Shadow"), alpha = .02, size = 1) +
      geom_rect(aes(xmin = -0.83083, xmax = 0.83083, ymin = 1.3775, ymax = 3.3775, fill = "Zone"), alpha = .02, size = 1) +
      geom_rect(aes(xmin = -0.83083/2, xmax = 0.83083/2, ymin = 1.745, ymax = 3.01, fill = "Heart"), alpha = .02, size = 1) + 
      
      scale_fill_manual(name = "Legend", values = c("Waste" = "deepskyblue3", "Chase" = "yellow", "Shadow" = "orange", "Zone" = "red", "Heart" = "darkred"),
                        breaks = c("Waste", "Chase", "Shadow", "Zone", 'Heart')) +
      theme_bw() + xlim(-3, 3) + ylim(0, 5) + facet_wrap(~ ab, ncol = 3, scales = "free") + labs(x = "", y = "", color = "Pitch", shape = "Result") + 
      scale_shape_manual(values = shape_values) + scale_color_manual(values = color_values) +
      theme(aspect.ratio = 1,
            legend.text = element_text(size = 12), 
            legend.title = element_text(size = 14), 
            strip.text = element_text(size = 12),    
            axis.text = element_text(size = 12),     
            axis.title = element_text(size = 14)) 
    
    
    
    
    
    ###################### start of totals table ###################### 
    
    total_bases <- function(play_result) {
      case_when(
        play_result == "Single" ~ 1,
        play_result == "Double" ~ 2,
        play_result == "Triple" ~ 3,
        play_result == "HomeRun" ~ 4,
        TRUE ~ 0
      )
    }
    
    
    batter_report <- batter_report %>%
      mutate(TotalBases = total_bases(PlayResult))
    
    ###################### game total table ######################
    
    total_table <- batter_report %>% 
      summarise(PA = as.integer(AtBat[length(AtBat)]),
                H = length(PlayResult[PlayResult == "Single" | PlayResult == "Double" | PlayResult == "Triple" | PlayResult == "HomeRun"]),
                BB = length(KorBB[KorBB == "Walk"]),
                HBP = length(PitchCall[PitchCall == "HitByPitch"]),
                SO = length(KorBB[KorBB == "Strikeout"]),
                RBI = sum(RunsScored),
                TBs = as.integer(sum(TotalBases)),
                SD = sum(SD_Score) / n(),
                'SD+' = as.integer(mean(SD_Score, na.rm = TRUE) * 100 / .93),
                xwOBA = format(round((sum(BB)*.69 + sum(HBP)*.72 + sum(hit_pred$Single)*.89 + sum(hit_pred$Double)*1.27 + sum(hit_pred$Triple)*1.62 + sum(hit_pred$HomeRun)*2.1)/PA, 3), 3)
      )
    
    
    ###################### spray chart ###################### 
    
    spray_chart <- geom_baseball(league = "MLB") +
      geom_point(mapping = aes(x = sin(batter_report$Bearing * pi / 180) * batter_report$Distance, 
                               y = cos(batter_report$Bearing * pi / 180) * batter_report$Distance, color = as.factor(batter_report$AtBat)), size = 3) + 
      labs(color = "PA")
    
    
    ###################### SD table ###################### 
    SD_table <- batter_report %>% 
      group_by(Zones) %>% 
      summarise(Take = length(Swing[Swing == "Take"]),
                Swing = length(Swing[Swing == "Swing"]),
                Miss = length(Swing[PitchCall == "StrikeSwinging"]),
                SD = sum(SD_Score) / n(),
                EV = as.integer(mean(ExitSpeed, na.rm = TRUE)),
                LA = as.integer((mean(Angle, na.rm = TRUE))))
    
    # Define a named vector with batter names and their corresponding emails
    batter_emails <- c(
      "Anderson, Jacob" = "meowboy6999@gmail.com",
      "Bright, Noah" = "rackrovick123343421@gmail.com"
    )
    
    observeEvent(input$send_report, {
      # Define the URL and file path for the screenshot
      url <- "https://jackt13.shinyapps.io/SpartanSavant/_w_990c26b4/"  # Replace with your app's URL if it's deployed
      file_path <- paste0(tempfile(), ".png")
      
      # Capture the screenshot
      webshot2::webshot(
        url, 
        file = file_path, 
        selector = "#Batter_Report",  # Capture the specific tab
        vwidth = 1200, 
        vheight = 800
      )
      
      # Get the email address based on the selected batter
      batter_name <- selected_batter()
      recipient_email <- batter_emails[batter_name]
      
      # Ensure the email is defined (in case of a mismatch)
      if (!is.na(recipient_email)) {
        # Send the email with the screenshot attached
        send_email_with_attachment(file_path, batter_name, recipient_email)
      } else {
        showNotification("No email address found for the selected batter.", type = "error")
      }
    })
    
    send_email_with_attachment <- function(file_path, batter_name, recipient_email) {
      library(gmailr)
      
      # Compose the email
      email <- gm_mime() %>%
        gm_to(recipient_email) %>%
        gm_from("jacktnovick@gmail.com") %>%
        gm_subject(paste("Batter Report for", batter_name)) %>%
        gm_text_body("Please find the attached report.") %>%
        gm_attach_file(file_path)
      
      # Send the email
      gm_send_message(email)
    }
    
    
    output$plate_graph <- renderPlot({
      plate_graph
    })
    
    output$Game_table <- renderTable({
      total_table
    })
    
    output$spray_chart <- renderPlot({
      spray_chart
    })
    
    output$SD_table <- renderTable({
      SD_table
    })
    
    output$SD_key <- renderUI({
      tags$div(
        style = "border: 1px solid black; padding: 10px; display: inline-block; background-color: #f9f9f9; margin-bottom: 10px;",
        HTML(
          "<table style='width: 100%; border-collapse: collapse;'>
        <thead>
          <tr>
            <th style='border: 1px solid black; padding: 5px;'><b>Level</b></th>
            <th style='border: 1px solid black; padding: 5px;'><b>National</b></th>
            <th style='border: 1px solid black; padding: 5px;'><b>Team</b></th>
          </tr>
        </thead>
        <tbody>
          <tr style='background-color: #008000;'>
            <td style='border: 1px solid black; padding: 5px;'><b>Elite</b></td>
            <td style='border: 1px solid black; padding: 5px;'><b>1.9</b></td>
            <td style='border: 1px solid black; padding: 5px;'><b>1.4</b></td>
          </tr>
          <tr style='background-color: #90EE90;'>
            <td style='border: 1px solid black; padding: 5px;'><b>Good</b></td>
            <td style='border: 1px solid black; padding: 5px;'><b>1.0</b></td>
            <td style='border: 1px solid black; padding: 5px;'><b>1.1</b></td>
          </tr>
          <tr style='background-color: #F5FFFA;'>
            <td style='border: 1px solid black; padding: 5px;'><b>Average</b></td>
            <td style='border: 1px solid black; padding: 5px;'><b>0.9</b></td>
            <td style='border: 1px solid black; padding: 5px;'><b>0.9</b></td>
          </tr>
          <tr style='background-color: #FF0000;'>
            <td style='border: 1px solid black; padding: 5px;'><b>Poor</b></td>
            <td style='border: 1px solid black; padding: 5px;'><b>0.7</b></td>
            <td style='border: 1px solid black; padding: 5px;'><b>0.7</b></td>
          </tr>
        </tbody>
      </table>"
        )
      )
    })
    
    
    
    
    output$Season_table <- renderTable({
      season_stats
    })
    
    output$xwOBA_table <- renderTable({
      xwOBA_table_data
    })
    
    
    
    
    output$xwOBA_key <- renderUI({
      tags$div(
        style = "border: 1px solid black; padding: 10px; display: inline-block; background-color: #f9f9f9; margin-bottom: 10px;",
        HTML(paste("<b>","Avg. SD+ = 100", "<br>", "Avg.SD Score = 0.93", "<br>", "Target SD Score = ≥1.00", "<br>",  "Avg. xwOBA on XBH = .778"))
      )
    })
    
    
    output$heat_map <- renderPlot({
      heat_map
    })
    
    
  })
  
  
  
  
  
  
  
  
  ###############################################
  ######### Post-Game Pitcher Reports ###########
  ###############################################
  
  # Box Score Table ----- ----------------------------------------
  output$box_score_table <- renderDataTable({
    table <- master %>%
      {
        if (input$SeasonInput_pitcher == 'ALL')
          filter(., Season != "1855")
        
        else if (input$SeasonInput_pitcher == '2023 - ALL')
          filter(., Year == "2023")
        
        else if (input$SeasonInput_pitcher == '2024 - ALL')
          filter(., Year == "2024")
        
        else if (input$SeasonInput_pitcher != 'ALL' & input$GameInput_pitcher == 'ALL')
          filter(., Season == input$SeasonInput_pitcher)
        
        else
          filter(.,
                 Season == input$SeasonInput_pitcher &
                   Date == input$GameInput_pitcher)
      } %>%
      
      filter(Pitcher == input$PitcherInput) %>%
      
      summarize(
        'IP' = round(((sum(KorBB == 'Strikeout') + sum(OutsOnPlay))/3), 2),
        'H' = (sum(PlayResult == 'Single') + sum(PlayResult == 'Double') + sum(PlayResult == 'Triple') + sum(PlayResult == 'HomeRun')),
        'R' = sum(RunsScored),
        'BB' = sum(KorBB == 'Walk'),
        'K' = sum(KorBB == 'Strikeout')
      )
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't', columnDefs = list(
      list(targets = 0, visible = FALSE),
      list(targets = 1:5, className = 'dt-center')
    ))) %>%
      formatStyle(c(1), `border-left` = "solid 1px") %>%
      formatStyle(c(5), `border-right` = "solid 1px")
  })
  
  # Pitch Profile Table ----- ----------------------------------------
  output$pitch_profile_table <- renderDataTable({
    table <- master %>%
      {
        if (input$SeasonInput_pitcher == 'ALL')
          filter(., Season != "1855")
        
        else if (input$SeasonInput_pitcher == '2023 - ALL')
          filter(., Year == "2023")
        
        else if (input$SeasonInput_pitcher == '2024 - ALL')
          filter(., Year == "2024")
        
        else if (input$SeasonInput_pitcher != 'ALL' & input$GameInput_pitcher == 'ALL')
          filter(., Season == input$SeasonInput_pitcher)
        
        else
          filter(.,
                 Season == input$SeasonInput_pitcher &
                   Date == input$GameInput_pitcher)
      } %>%
      
      filter(Pitcher == input$PitcherInput) %>%
      group_by('Pitch' = TaggedPitchType) %>%
      summarize(
        '#' = n(),
        'Max Velo' = round(max(RelSpeed, na.rm = TRUE), 1),
        'Avg. Velo' = round(mean(RelSpeed, na.rm = TRUE), 1),
        'Spin (RPM)' = round(mean(SpinRate, na.rm = TRUE), 0),
        'iVB (in.)' = round(mean(InducedVertBreak, na.rm = TRUE), 1),
        'HB (in.)' = round(mean(HorzBreak, na.rm = TRUE), 1),
        'Rel. Height' = round(mean(RelHeight, na.rm = TRUE), 1),
        'Rel. Side' = round(mean(RelSide, na.rm = TRUE), 1),
        'Extension' = round(mean(Extension, na.rm = TRUE), 1)
      ) %>%
      mutate(Usage = scales::percent(`#`/sum(`#`))) %>% 
      relocate(Usage, .after = `#`) %>%
      arrange(desc(`#`))
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't', columnDefs = list(
      list(targets = 0, visible = FALSE),
      list(targets = 2:11, className = 'dt-center')
    ))) %>%
      formatStyle(c(1), `border-left` = "solid 1px") %>%
      formatStyle(c(1, 3, 5, 8, 11), `border-right` = "solid 1px")
  })
  
  # Pitch Production Table ----- -------------------------------------
  
  
  output$pitch_production_table <- renderDataTable({
    table <- master %>%
      {
        if (input$SeasonInput_pitcher == 'ALL')
          filter(., Season != "1855")
        
        else if (input$SeasonInput_pitcher == '2023 - ALL')
          filter(., Year == "2023")
        
        else if (input$SeasonInput_pitcher == '2024 - ALL')
          filter(., Year == "2024")
        
        else if (input$SeasonInput_pitcher != 'ALL' & input$GameInput_pitcher == 'ALL')
          filter(., Season == input$SeasonInput_pitcher)
        
        else
          filter(.,
                 Season == input$SeasonInput_pitcher &
                   Date == input$GameInput_pitcher)
      } %>%
      
      filter(Pitcher == input$PitcherInput) %>%
      group_by('Pitch' = TaggedPitchType) %>%
      summarize(
        '#' = n(),
        '1P-Strike %' = round(sum(PitchCall %in% c("StrikeCalled", "StrikeSwinging", "FoulBall", "InPlay", "FoulBallFieldable", "FoulBallNotFieldable") & Balls == '0' & Strikes == '0') / (sum(Balls == '0' & Strikes == '0')) * 100, 1),
        'Strike %' = round(sum(PitchCall %in% c("StrikeCalled", "StrikeSwinging", "FoulBall", "InPlay", "FoulBallFieldable", "FoulBallNotFieldable")) /n() * 100, 1),
        'Zone %' = round(sum(strikezone == 1) /n() * 100, 1),
        'Whiff %' = round(sum(PitchCall %in% c("StrikeSwinging")) / sum(PitchCall %in% c("StrikeSwinging", "InPlay", "FoulBall", "FoulBallFieldable", "FoulBallNotFieldable")) * 100, 1),
        'BIP' = sum(PitchCall %in% c("InPlay")),
        'GB' = sum(TaggedHitType == 'GroundBall'),
        'LD' = sum(TaggedHitType == 'LineDrive'),
        'FB' = sum(TaggedHitType == 'FlyBall'),
        'Hard Hit' = sum(PitchCall %in% c('InPlay') & ExitSpeed > 90, na.rm = TRUE),
        'aEV' = round(mean(ExitSpeed[PitchCall == "InPlay" & TaggedHitType != "Bunt"], na.rm = TRUE), 1),
        'aLA' = round(mean(Angle[PitchCall == "InPlay"], na.rm = TRUE), 1)
      ) %>%
      mutate(Usage = scales::percent(`#`/sum(`#`))) %>% 
      relocate(Usage, .after = `#`) %>%
      # Replacing blank cells (division by 0) with NA:
      mutate(across(everything(), ~replace_na(.x, NA))) %>%
      arrange(desc(`#`))
    
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't', columnDefs = list(
      list(targets = 0, visible = FALSE),
      list(targets = 2:14, className = 'dt-center')
    ))) %>%
      formatStyle(c(1), `border-left` = "solid 1px") %>%
      formatStyle(c(1, 3, 7, 12, 14), `border-right` = "solid 1px") %>%
      formatStyle(c("1P-Strike %", 'Whiff %', 'aEV', 'aLA'),
                  Color = styleEqual(('NA'), '#979797'))
  })
  
  
  # Release Point Plot ----- -----------------------------------------
  output$release_point_plot <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$SeasonInput_pitcher == 'ALL')
            filter(., Season != "1855")
          
          else if (input$SeasonInput_pitcher == '2023 - ALL')
            filter(., Year == "2023")
          
          else if (input$SeasonInput_pitcher == '2024 - ALL')
            filter(., Year == "2024")
          
          else if (input$SeasonInput_pitcher != 'ALL' & input$GameInput_pitcher == 'ALL')
            filter(., Season == input$SeasonInput_pitcher)
          
          else
            filter(.,
                   Season == input$SeasonInput_pitcher &
                     Date == input$GameInput_pitcher)
        } %>%
        
        filter(Pitcher == input$PitcherInput)
    })
    ggplot(data = dataFilter(),aes(x = -RelSide,y = RelHeight,color = TaggedPitchType)) +
      labs(x = "",y = "",color = " ",title = "Release Point (Catcher POV)") +
      pitch_colors +
      xlim(-3.75, 3.75) + ylim(0, 7.5) +
      geom_point(size = 3, na.rm = TRUE) +
      annotation_raster(mound, ymin = -.5,ymax= .35,xmin = -4.25,xmax = 4.25) +
      theme_bw() + theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5)) +
      theme(legend.position = "bottom",legend.text = element_text(size = 12),
            axis.title = element_text(size = 14))
  }, width = 400, height = 400)
  
  
  # Pitch Movement Plot ----- ----------------------------------------
  output$pitch_movement_plot <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$SeasonInput_pitcher == 'ALL')
            filter(., Season != "1855")
          
          else if (input$SeasonInput_pitcher == '2023 - ALL')
            filter(., Year == "2023")
          
          else if (input$SeasonInput_pitcher == '2024 - ALL')
            filter(., Year == "2024")
          
          else if (input$SeasonInput_pitcher != 'ALL' & input$GameInput_pitcher == 'ALL')
            filter(., Season == input$SeasonInput_pitcher)
          
          else
            filter(.,
                   Season == input$SeasonInput_pitcher &
                     Date == input$GameInput_pitcher)
        } %>%
        
        filter(Pitcher == input$PitcherInput)
    })
    ggplot(data = dataFilter(),
           aes(x = HorzBreak, y = InducedVertBreak, color = TaggedPitchType)) +
      labs(x = "Horizontal Movement (in.)",y = "Vertical Movement (in.)",
           color = " ",title = "Pitch Movement (Pitcher POV)") +
      pitch_colors +
      xlim(-28, 28) + ylim(-28, 28) +
      geom_segment(aes(x = 0,y = -28,xend = 0,yend = 28),size = 1,color = "grey55") +
      geom_segment(aes(x = -28,y = 0,xend = 28,yend = 0),size = 1,color = "grey55") +
      geom_point(size = 3, na.rm = TRUE) +
      theme_bw() + theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5)) +
      theme(legend.position = "bottom",legend.text = element_text(size = 12),axis.title = element_text(size = 14))
  }, width = 400, height = 400)
  
  
  # Pitch Velocity Plot ------------------------------------------------------
  
  pitch_velo_postgame <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$SeasonInput_pitcher == 'ALL')
            filter(., Season != "1855")
          
          else if (input$SeasonInput_pitcher == '2023 - ALL')
            filter(., Year == "2023")
          
          else if (input$SeasonInput_pitcher == '2024 - ALL')
            filter(., Year == "2024")
          
          else if (input$SeasonInput_pitcher != 'ALL' & input$GameInput_pitcher == 'ALL')
            filter(., Season == input$SeasonInput_pitcher)
          
          else
            filter(.,
                   Season == input$SeasonInput_pitcher &
                     Date == input$GameInput_pitcher)
        } %>%
        filter(Pitcher == input$PitcherInput) %>%
        mutate(PitchNo = row_number())
    })
    ggplot(data = dataFilter()) +
      geom_line(aes(y = RelSpeed, x = PitchNo, color = TaggedPitchType), size = 1) +
      geom_point(aes(y = RelSpeed, x = PitchNo, color = TaggedPitchType), size = 3) + 
      pitch_colors +
      labs(x = "Pitch Count",y = "Pitch Velocity (MPH)",color = " ",title = "Pitch Velocity") +
      theme_bw() + 
      theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5),axis.text = element_text(size = 12)) +
      theme(legend.position = "bottom",legend.text = element_text(size = 12),axis.title = element_text(size = 14))
  }, width = 400, height = 400)
  
  
  pitch_velo_cumulative <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {if (input$SeasonInput_pitcher == 'ALL')
          filter(., Season != "1855")
          else if (input$SeasonInput_pitcher != 'ALL' & input$GameInput_pitcher == 'ALL')
            filter(., Season == input$SeasonInput_pitcher)
        } %>%
        filter(Pitcher == input$PitcherInput) %>%
        group_by(Pitcher, TaggedPitchType, Date) %>%
        summarize('mean_release_speed' = mean(RelSpeed, na.rm = TRUE))
    })
    ggplot(dataFilter(), aes(x = Date, y = mean_release_speed,
                             group = TaggedPitchType, color = TaggedPitchType)) +
      pitch_colors +
      geom_line(size = 1, mapping = aes(color = TaggedPitchType)) +
      geom_point(size = 3, mapping = aes(color = TaggedPitchType)) +
      labs(x = "Game Date", y = "Velocity (MPH)", color = "",
           title = "Average Pitch Velocity by Game", color = "Pitch Type") +
      theme_bw() + 
      theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5),axis.text = element_text(size = 12)) +
      theme(legend.position = "bottom",legend.text = element_text(size = 12),axis.title = element_text(size = 14)
      )
  }, width = 400, height = 400)
  
  
  observeEvent(input$GameInput_pitcher,
               {if (input$GameInput_pitcher == 'ALL'){
                 output$pitch_velocity_plot = pitch_velo_cumulative
               }
                 else{
                   output$pitch_velocity_plot = pitch_velo_postgame
                 }})
  
  
  # Pitch Location Plot ----- ----------------------------------------
  output$pitch_location_plot <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$SeasonInput_pitcher == 'ALL')
            filter(., Season != "1855")
          
          else if (input$SeasonInput_pitcher == '2023 - ALL')
            filter(., Year == "2023")
          
          else if (input$SeasonInput_pitcher == '2024 - ALL')
            filter(., Year == "2024")
          
          else if (input$SeasonInput_pitcher != 'ALL' & input$GameInput_pitcher == 'ALL')
            filter(., Season == input$SeasonInput_pitcher)
          
          else
            filter(.,
                   Season == input$SeasonInput_pitcher &
                     Date == input$GameInput_pitcher)
        } %>%
        
        filter(Pitcher == input$PitcherInput)
    })
    ggplot() +
      pitch_colors +
      xlim(-3, 3) + ylim(0, 5) + labs(color = "", title = "All Pitches") +
      #StrikeZone:
      geom_rect(aes(xmin = -0.8305,xmax = 0.8305,ymin = 1.3775,ymax = 3.6225),alpha = 0,size = 1,color = "grey", linetype = 'dashed') +
      geom_rect(aes(xmin = -0.7083,xmax = 0.7083,ymin = 1.5,ymax = 3.5),alpha = 0,size = 1,color = "black") +
      # Home Plate:
      geom_segment(aes(x = -0.7083,y = 0.5,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = -0.7083,yend = 0.5),size = 1,color = "black") +
      geom_point(data = dataFilter(),
                 mapping =  aes(x = PlateLocSide * -1,y = PlateLocHeight,
                                color = TaggedPitchType),size = 3,na.rm = TRUE) +
      scale_shape_manual(values = c(19, 1)) +
      theme_bw() + theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5)) +
      theme(legend.position = "bottom",legend.text = element_text(size = 12),axis.title = element_blank())
  }, width = 350, height = 450)
  
  
  
  hit_model_data <- master %>% 
    filter(PitchCall == "InPlay") %>% 
    select(PlayResult, ExitSpeed, Angle) 
  
  hit_pred <- predict(hit_model, hit_model_data, type = "prob")
  
  master <- master %>%
    mutate(
      xwOBA = ifelse(PitchCall == "InPlay",
                     (hit_pred$Single * 0.89 +
                        hit_pred$Double * 1.27 +
                        hit_pred$Triple * 1.62 +
                        hit_pred$HomeRun * 2.10),
                     NA_real_)
    )
  
  
  # Whiff Plot ----- -------------------------------------------------
  output$whiff_plot <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$SeasonInput_pitcher == 'ALL')
            filter(., Season != "1855")
          
          else if (input$SeasonInput_pitcher == '2023 - ALL')
            filter(., Year == "2023")
          
          else if (input$SeasonInput_pitcher == '2024 - ALL')
            filter(., Year == "2024")
          
          else if (input$SeasonInput_pitcher != 'ALL' & input$GameInput_pitcher == 'ALL')
            filter(., Season == input$SeasonInput_pitcher)
          
          else
            filter(.,
                   Season == input$SeasonInput_pitcher &
                     Date == input$GameInput_pitcher)
        } %>%
        
        filter(Pitcher == input$PitcherInput, whiff == 1)
    })
    ggplot() +
      pitch_colors +
      xlim(-3, 3) + ylim(0, 5) + labs(color = "", title = "Whiffs") +
      #StrikeZone:
      geom_rect(aes(xmin = -0.8305,xmax = 0.8305,ymin = 1.3775,ymax = 3.6225),alpha = 0,size = 1,color = "grey", linetype = 'dashed') +
      geom_rect(aes(xmin = -0.7083,xmax = 0.7083,ymin = 1.5,ymax = 3.5),alpha = 0,size = 1,color = "black") +
      # Home Plate:
      geom_segment(aes(x = -0.7083,y = 0.5,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = -0.7083,yend = 0.5),size = 1,color = "black") +
      geom_point(data = dataFilter(),mapping = aes(x = PlateLocSide * -1,y = PlateLocHeight,
                                                   color = TaggedPitchType),size = 3,na.rm = TRUE) +
      theme_bw() + 
      theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5)) +
      theme(legend.position = "bottom",legend.text = element_text(size = 12),axis.title = element_blank())
  }, width = 350, height = 450)
  #
  
  # InPlay Plot ----- ------------------------------------------------
  output$inplay_plot <- renderPlotly({
    dataFilter <- reactive({
      master %>%
        {
          if (input$SeasonInput_pitcher == 'ALL')
            filter(., Season != "1855")
          
          else if (input$SeasonInput_pitcher == '2023 - ALL')
            filter(., Year == "2023")
          
          else if (input$SeasonInput_pitcher == '2024 - ALL')
            filter(., Year == "2024")
          
          else if (input$SeasonInput_pitcher != 'ALL' & input$GameInput_pitcher == 'ALL')
            filter(., Season == input$SeasonInput_pitcher)
          
          else
            filter(.,
                   Season == input$SeasonInput_pitcher &
                     Date == input$GameInput_pitcher)
        } %>%
        filter(Pitcher == input$PitcherInput, PitchCall == 'InPlay')
    })
    
    # Plot using ggplot
    p <- ggplot() +
      pitch_colors +  # Make sure `pitch_colors` is properly defined and matches `TaggedPitchType`
      xlim(-3, 3) + ylim(0, 5) + labs(color = "", title = "Balls In Play") +
      
      geom_segment(aes(x = -0.7083,y = 0.5,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = -0.7083,yend = 0.5),size = 1,color = "black") +
      #Zone
      geom_segment(aes(x = -0.9975,xend = 0.9975,y = 1.255,yend = 1.255),size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = -0.9975,xend = 0.9975,y = 3.5,yend = 3.5), size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = 0.9975,xend = 0.9975,y = 1.255,yend = 3.5), size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = -0.9975,xend = -0.9975,y = 1.255,yend = 3.5), size = .5,color = "black", linetype = 'dashed') + 
      geom_segment(aes(x = -0.83083, xend = 0.83083, y = 1.3775, yend = 1.3775), size = .5, color = "black") +
      geom_segment(aes(x = -0.83083, xend = 0.83083, y = 3.3775, yend = 3.3775), size = .5, color = "black") +
      geom_segment(aes(x = -0.83083, xend = -0.83083, y = 1.3775, yend = 3.3775), size = .5, color = "black") +
      geom_segment(aes(x = 0.83083, xend = 0.83083, y = 1.3775, yend = 3.3775), size = .5, color = "black") +
      #SD Zones
      # Balls In Play Points
      geom_point(data = dataFilter(),
                 mapping = aes(x = PlateLocSide * -1, y = PlateLocHeight, color = TaggedPitchType,
                               text = paste("EV:", round(ExitSpeed, 1), "<br>",
                                            "xwOBA:", round(xwOBA, 3))),
                 size = 1.5, na.rm = TRUE) +
      theme_bw() + theme(plot.title = element_text(size = 12, face = "bold", hjust = 0.5)) +
      theme(legend.position = "bottom", legend.text = element_text(size = 12), axis.title = element_blank())
    
    # Convert ggplot to plotly
    ggplotly(p, tooltip = "text")  # Specify tooltip to show 'text' field
  })
  
  ###############################################
  ########### Umpire Report Plots ###############
  ###############################################
  
  umpFilter <- reactive({
    master %>%
      filter(Date == input$GameInput_umpire) %>%
      mutate(Umpire = ifelse(Umpire == "", "N/A", Umpire))
  })
  
  output$umpire_name <- renderText({
    umpFilter()$Umpire[1]
  })
  
  #### Umpire Summary Table ####
  
  output$umpire_summary_table <- renderDataTable({
    
    accuracy_stats <- master %>%
      {
        if (input$HitOrPitch_Input == 'ALL Pitches')
          filter(., PitcherTeam != "1855")
        
        else if (input$HitOrPitch_Input == 'MSU Pitching')
          filter(., PitcherTeam == 'MIC_SPA')
        
        else if (input$HitOrPitch_Input == 'MSU Batting')
          filter(., BatterTeam == 'MIC_SPA')
      } %>%
      filter(Date == input$GameInput_umpire,
             PitchCall == 'StrikeCalled' | PitchCall == 'BallCalled') %>%
      group_by(PitchCall) %>%
      count(strikezone) %>%
      mutate(fraction = n/sum(n)) %>%
      mutate(ymax = cumsum(fraction)) %>%
      mutate(ymin = c(0, head(ymax, n=-1)))
    accuracy_vec = c(scales::percent(accuracy_stats$ymax[1], accuracy = 0.1),
                     scales::percent(last(accuracy_stats$fraction), accuracy = 0.1))
    
    table <- master %>%
      {
        if (input$HitOrPitch_Input == 'ALL Pitches')
          filter(., PitcherTeam != "1855")
        
        else if (input$HitOrPitch_Input == 'MSU Pitching')
          filter(., PitcherTeam == 'MIC_SPA')
        
        else if (input$HitOrPitch_Input == 'MSU Batting')
          filter(., BatterTeam == 'MIC_SPA')
        
      } %>%
      filter(Date == input$GameInput_umpire,
             PitchCall == 'StrikeCalled' | PitchCall == 'BallCalled') %>%
      group_by('Pitch Call' = PitchCall) %>%
      summarize(
        'No.' = n(),
        'True Strike' = sum(strikezone),
        'True Ball' = sum(No.) - sum(strikezone)) %>%
      mutate(Accuracy = accuracy_vec) %>%
      arrange((`Pitch Call`))
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't',
                                            columnDefs = list(
                                              list(targets = 0, visible = FALSE),
                                              list(targets = 2:5, className = 'dt-center')
                                            )
    )) %>%
      formatStyle(c(1, 2), `border-left` = "solid 1px") %>%
      formatStyle(c(2, 4, 5), `border-right` = "solid 1px")
  })
  
  
  # Umpire Main Plot -----------------------------------------------------------
  
  output$total_umpire_plot <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$HitOrPitch_Input == 'ALL Pitches')
            filter(., PitcherTeam != "1855")
          
          else if (input$HitOrPitch_Input == 'MSU Pitching')
            filter(., PitcherTeam == 'MIC_SPA')
          
          else if (input$HitOrPitch_Input == 'MSU Batting')
            filter(., BatterTeam == 'MIC_SPA')
          
        } %>%
        filter(Date == input$GameInput_umpire,
               PitchCall == 'StrikeCalled' | PitchCall == 'BallCalled')
    })
    ggplot() +
      umpire_colors +
      xlim(-3, 3) + ylim(0, 5) + labs(color = "", title = "All Strike/Ball Calls") +
      #StrikeZone:
      geom_rect(aes(xmin = -0.8305,xmax = 0.8305,ymin = 1.3775,ymax = 3.6225),alpha = 0,size = 1,color = "grey", linetype = 'dashed') +
      geom_rect(aes(xmin = -0.7083,xmax = 0.7083,ymin = 1.5,ymax = 3.5),alpha = 0,size = 1,color = "black") +
      # Home Plate:
      geom_segment(aes(x = -0.7083,y = 0.5,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = -0.7083,yend = 0.5),size = 1,color = "black") +
      geom_point(data = dataFilter(),mapping =  aes(x = PlateLocSide * -1,y = PlateLocHeight,
                                                    color = PitchCall),size = 3,na.rm = TRUE) +
      scale_shape_manual(values = c(19, 1)) +
      theme_bw() + theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5)) +
      theme(legend.position = "bottom",legend.text = element_text(size = 12),axis.title = element_blank())
  }, width = 350, height = 450)
  
  # Umpire Incorrect Balls Plot ------------------------------------------------
  output$incorrect_balls_plot <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$HitOrPitch_Input == 'ALL Pitches')
            filter(., PitcherTeam != "1855")
          
          else if (input$HitOrPitch_Input == 'MSU Pitching')
            filter(., PitcherTeam == 'MIC_SPA')
          
          else if (input$HitOrPitch_Input == 'MSU Batting')
            filter(., BatterTeam == 'MIC_SPA')
          
        } %>%
        filter(Date == input$GameInput_umpire, 
               PitchCall == 'BallCalled',
               PlateLocSide >= -0.83 & PlateLocSide <= 0.83 &
                 PlateLocHeight >= 1.378 & PlateLocHeight <= 3.622)
    })
    ggplot() +
      umpire_colors +
      xlim(-3, 3) + ylim(0, 5) + labs(color = "", title = "Incorrect Balls Called") +
      #StrikeZone:
      geom_rect(aes(xmin = -0.8305,xmax = 0.8305,ymin = 1.3775,ymax = 3.6225),alpha = 0,size = 1,color = "grey", linetype = 'dashed') +
      geom_rect(aes(xmin = -0.7083,xmax = 0.7083,ymin = 1.5,ymax = 3.5),alpha = 0,size = 1,color = "black") +
      # Home Plate:
      geom_segment(aes(x = -0.7083,y = 0.5,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = -0.7083,yend = 0.5),size = 1,color = "black") +
      geom_point(data = dataFilter(),mapping =  aes(x = PlateLocSide * -1,y = PlateLocHeight,
                                                    color = PitchCall),size = 3,na.rm = TRUE) +
      scale_shape_manual(values = c(19, 1)) +
      theme_bw() + theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5)) +
      theme(legend.position = "bottom",legend.text = element_text(size = 12),axis.title = element_blank())
  }, width = 350, height = 450)
  
  # Umpire Incorrect Strike Plot -----------------------------------------------
  output$incorrect_strikes_plot <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$HitOrPitch_Input == 'ALL Pitches')
            filter(., PitcherTeam != "1855")
          
          else if (input$HitOrPitch_Input == 'MSU Pitching')
            filter(., PitcherTeam == 'MIC_SPA')
          
          else if (input$HitOrPitch_Input == 'MSU Batting')
            filter(., BatterTeam == 'MIC_SPA')
          
        } %>%
        filter(Date == input$GameInput_umpire,
               PitchCall == 'StrikeCalled',
               PlateLocSide < -0.83 | PlateLocSide > 0.83 |
                 PlateLocHeight < 1.378 | PlateLocHeight > 3.622)
    })
    ggplot() +
      umpire_colors +
      xlim(-3, 3) + ylim(0, 5) + labs(color = "", title = "Incorrect Strikes Called") +
      #StrikeZone:
      geom_rect(aes(xmin = -0.8305,xmax = 0.8305,ymin = 1.3775,ymax = 3.6225),alpha = 0,size = 1,color = "grey", linetype = 'dashed') +
      geom_rect(aes(xmin = -0.7083,xmax = 0.7083,ymin = 1.5,ymax = 3.5),alpha = 0,size = 1,color = "black") +
      # Home Plate:
      geom_segment(aes(x = -0.7083,y = 0.5,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
      geom_segment(aes(x = 0.7083,y = 0.3,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
      geom_segment(aes(x = -0.7083,y = 0.3,xend = -0.7083,yend = 0.5),size = 1,color = "black") +
      geom_point(data = dataFilter(),mapping =  aes(x = PlateLocSide * -1,y = PlateLocHeight,
                                                    color = PitchCall),size = 3,na.rm = TRUE) +
      scale_shape_manual(values = c(19, 1)) +
      theme_bw() + theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5)) +
      theme(legend.position = "bottom",legend.text = element_text(size = 12),axis.title = element_blank())
  }, width = 350, height = 450)
  
  
  # Umpire Ball Accuracy Plot --------------------------------------------------
  output$ball_accuracy_plot <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$HitOrPitch_Input == 'ALL Pitches')
            filter(., PitcherTeam != "1855")
          
          else if (input$HitOrPitch_Input == 'MSU Pitching')
            filter(., PitcherTeam == 'MIC_SPA')
          
          else if (input$HitOrPitch_Input == 'MSU Batting')
            filter(., BatterTeam == 'MIC_SPA')
          
        } %>%
        filter(Date == input$GameInput_umpire,
               PitchCall == 'BallCalled') %>%
        group_by(PitchCall) %>%
        count(strikezone) %>%
        mutate(fraction = n/sum(n)) %>%
        mutate(ymax = cumsum(fraction)) %>%
        mutate(ymin = c(0, head(ymax, n=-1)))
    })
    ggplot() +
      geom_rect(data = dataFilter(), aes(xmin=3, xmax = 4, ymin=ymin, ymax=ymax, fill = factor(strikezone))) +
      geom_text(data = dataFilter(), x=2, aes(y=0, label= scales::percent(ymax[1], accuracy = 0.1)),size=10) +
      geom_text(data = dataFilter(), x=1.68, aes(y=0, label = "MLB Avg: 97%", size = 10, fontface=3)) + 
      annotate(geom="text", x=1.5, y=0, label="MLB Avg: 97%",
               color="black") +
      coord_polar(theta="y") +
      ball_accuracy_colors + 
      labs(color = "", title = "Called Ball Accuracy") +
      xlim(c(2, 4)) +
      theme_void() +
      theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5, vjust = -8),
            legend.position = "none", axis.title = element_blank())
  }, width = 450, height = 450)
  
  # Umpire Total Accuracy Plot -------------------------------------------------
  output$total_accuracy_plot <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$HitOrPitch_Input == 'ALL Pitches')
            filter(., PitcherTeam != "1855")
          
          else if (input$HitOrPitch_Input == 'MSU Pitching')
            filter(., PitcherTeam == 'MIC_SPA')
          
          else if (input$HitOrPitch_Input == 'MSU Batting')
            filter(., BatterTeam == 'MIC_SPA')
          
        } %>%
        filter(Date == input$GameInput_umpire,
               PitchCall == 'StrikeCalled' | PitchCall == 'BallCalled') %>%
        group_by(PitchCall) %>%
        count(strikezone) %>%
        ungroup() %>%
        mutate(fraction = n/sum(n)) %>%
        mutate(ymax = cumsum(fraction)) %>%
        mutate(ymin = c(0, head(ymax, n=-1)))
    })
    ggplot() +
      geom_rect(data = dataFilter(), aes(ymax=(last(fraction) + first(fraction)),
                                         ymin=1-(last(fraction) + first(fraction)),
                                         xmax=4, xmin=3), fill = 'black') +
      geom_text(data = dataFilter(), x=2, aes(y=0, label = scales::percent(last(fraction) + first(fraction), accuracy = 0.1)),size=10) +
      geom_text(data = dataFilter(), x=1.68, aes(y=0, label = "MLB Avg: 94%", size = 10, fontface=3)) + 
      coord_polar(theta="y") +
      labs(color = "", title = "Overall Accuracy") +
      xlim(c(2, 4)) +
      theme_void() + 
      theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5, vjust = -8),
            legend.position = "none", axis.title = element_blank())
  }, width = 450, height = 450)
  
  
  # Umpire Strike Accuracy Plot ------------------------------------------------
  output$strike_accuracy_plot <- renderPlot({
    dataFilter <- reactive({
      master %>%
        {
          if (input$HitOrPitch_Input == 'ALL Pitches')
            filter(., PitcherTeam != "1855")
          
          else if (input$HitOrPitch_Input == 'MSU Pitching')
            filter(., PitcherTeam == 'MIC_SPA')
          
          else if (input$HitOrPitch_Input == 'MSU Batting')
            filter(., BatterTeam == 'MIC_SPA')
          
        } %>%
        filter(Date == input$GameInput_umpire,
               PitchCall == 'StrikeCalled') %>%
        group_by(PitchCall) %>%
        count(strikezone) %>%
        mutate(fraction = n/sum(n)) %>%
        mutate(ymax = cumsum(fraction)) %>%
        mutate(ymin = c(0, head(ymax, n=-1)))
    })
    
    ggplot() +
      geom_rect(data = dataFilter(), aes(ymax=ymin, ymin=ymax, xmax=4, xmin=3, fill = factor(strikezone))) +
      geom_text(data = dataFilter(), x=2, aes(y=0, label= scales::percent(last(fraction), accuracy = 0.1)),size=10) +
      geom_text(data = dataFilter(), x=1.68, aes(y=0, label = "MLB Avg: 88%", size = 10, fontface=3)) + 
      coord_polar(theta="y") +
      labs(color = "", title = "Called Strike Accuracy") +
      strike_accuracy_colors +
      xlim(c(2, 4)) +
      theme_void() + 
      theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5, vjust = -8),
            legend.position = "none", axis.title = element_blank())
  }, width = 450, height = 450)
  
  
  
  # wASI Players Table --------------------------------------------------
  output$wASI_table = renderDataTable({
    table <- wasi_players %>%
      select(Name, G, PA, AB, `QAB%`, `R.QAB%`, OPS, R.OPS, WOBA, R.WOBA, `HH%`, `R.HH%`, `Chase%`, `R.Chase%`,
             ASI, R.ASI, wASI, R.wASI) %>%
      mutate_at(c("OPS", "WOBA"), round, 3) %>%
      arrange(R.wASI)
    
    tableFilter <- reactive({
      table %>%
        filter(PA >= input$PAs[1], PA <= input$PAs[2])
    })
    datatable(tableFilter(), options = list(dom = 't', 
                                            "pageLength" = 40,
                                            autoWidth = FALSE,
                                            columnDefs = list(
                                              list(targets = 0, visible = FALSE),
                                              list(targets = 1, width = '100px'),
                                              list(targets = 2:18, className = 'dt-center')
                                            ))) %>%
      formatStyle(c(1, 2), `border-left` = "solid 1px") %>%
      formatStyle(c(4, 6, 8, 10, 12, 14, 16, 18), `border-right` = "solid 1px") %>%
      formatStyle("QAB%",
                  Color = styleEqual(max(table$`QAB%`, na.rm = TRUE), 'orange'),
                  BackgroundColor = styleInterval(c(45, 55),
                                                  values = c(alpha('red', alpha = .25),
                                                             alpha('yellow', alpha=.25),
                                                             alpha('green', alpha = .25)))) %>%
      formatStyle("OPS",
                  Color = styleEqual(max(table$OPS, na.rm = TRUE), 'orange')) %>%
      formatStyle("WOBA",
                  Color = styleEqual(max(table$WOBA, na.rm = TRUE), 'orange')) %>%
      formatStyle("HH%",
                  Color = styleEqual(max(table$`HH%`, na.rm = TRUE), 'orange')) %>%
      formatStyle("Chase%",
                  Color = styleEqual(min(table$`Chase%`, na.rm = TRUE), 'orange'))
  })
  
  
  # wASI Team Table --------------------------------------------------
  output$wASI_team_table = renderDataTable({
    table <- wasi_team %>%
      select(Name, G, PA, AB, `QAB%`, OPS, WOBA, `HH%`, `Chase%`)
    #filter(between(Date, input$DateRangeInput[1], input$DateRangeInput[2])) %>%
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't',
                                            "pageLength" = 40,
                                            columnDefs = list(
                                              list(targets = 0, visible = FALSE),
                                              list(targets = 2:9, className = 'dt-center')
                                            ))) %>%
      formatStyle(c(1, 2), `border-left` = "solid 1px") %>%
      formatStyle(c(4,5,6,7,8,9), `border-right` = "solid 1px")
  })
  
  
  # Offense Stats Players Table --------------------------------------------------
  output$offense_stats_table = renderDataTable({
    table <- wasi_players %>%
      select(Name, G, PA, AB, BA, OBP, SLG, OPS, WOBA, xWOBA, XBH, `HH%`, `K%`, `BB%`, `Miss%`, `Chase%`, `SWING+`, `SSE+`) %>%
      mutate(`Diff.` = WOBA - xWOBA) %>%
      relocate(`Diff.`, .after = xWOBA) %>%
      mutate_at(5:11, round, 3) %>%
      arrange(desc(PA))
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't', 
                                            "pageLength" = 40,
                                            autoWidth = FALSE,
                                            columnDefs = list(
                                              list(targets = 0, visible = FALSE),
                                              list(targets = 1, width = '100px'),
                                              list(targets = 2:19, className = 'dt-center')
                                            ))) %>%
      formatStyle(c(1, 2), `border-left` = "solid 1px") %>%
      formatStyle(c(4, 8, 11, 13, 17, 19), `border-right` = "solid 1px") %>%
      formatStyle("BB%",
                  Color = styleEqual(max(table$`BB%`), 'orange'),
                  BackgroundColor = styleInterval(c(9, 18),
                                                  values = c(alpha('red', alpha = .25), 'white', alpha('green', alpha = .25)))) %>%
      formatStyle("K%",
                  Color = styleEqual(min(table$`K%`), 'orange'),
                  BackgroundColor = styleInterval(c(7, 20, 25),
                                                  values = c(alpha('green', alpha = .25), 'white', alpha('yellow', alpha = .25), alpha('red', alpha = .25)))) %>%
      formatStyle("SWING+",
                  Color = styleEqual(max(table$`SWING+`), 'orange'),
                  BackgroundColor = styleInterval(c(85, 110),
                                                  values = c(alpha('red', alpha = .25), 'white', alpha('green', alpha = .25)))) %>%
      formatStyle("SSE+",
                  Color = styleEqual(max(table$`SSE+`), 'orange'),
                  BackgroundColor = styleInterval(c(85, 110),
                                                  values = c(alpha('red', alpha = .25), 'white', alpha('green', alpha = .25)))) %>%
      formatStyle("BA", Color = styleEqual(max(table$`BA`, na.rm = TRUE), 'orange')) %>%
      formatStyle("OBP", Color = styleEqual(max(table$`OBP`, na.rm = TRUE), 'orange')) %>%
      formatStyle("SLG", Color = styleEqual(max(table$`SLG`, na.rm = TRUE), 'orange')) %>%
      formatStyle("OPS", Color = styleEqual(max(table$`OPS`, na.rm = TRUE), 'orange')) %>%
      formatStyle("WOBA", Color = styleEqual(max(table$`WOBA`, na.rm = TRUE), 'orange')) %>%
      formatStyle("xWOBA", Color = styleEqual(max(table$`xWOBA`, na.rm = TRUE), 'orange')) %>%
      formatStyle("XBH", Color = styleEqual(max(table$`XBH`, na.rm = TRUE), 'orange')) %>%
      formatStyle("HH%", Color = styleEqual(max(table$`HH%`, na.rm = TRUE), 'orange')) %>%
      formatStyle("Miss%", Color = styleEqual(min(table$`Miss%`, na.rm = TRUE), 'orange')) %>%
      formatStyle("Chase%", Color = styleEqual(min(table$`Chase%`, na.rm = TRUE), 'orange'))
    
  })
  
  
  # Offense Stats Team Table --------------------------------------------------
  output$offense_stats_team_table = renderDataTable({
    table <- wasi_team %>%
      select(Name, PA, AB, BA, OBP, SLG, OPS, WOBA, xWOBA, XBH, `HH%`, `K%`, `BB%`, `Miss%`, `Chase%`, `SWING+`, `SSE+`) %>%
      mutate(`Diff.` = WOBA - xWOBA) %>%
      relocate(`Diff.`, .after = xWOBA)
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't', 
                                            "pageLength" = 40,
                                            autoWidth = FALSE,
                                            columnDefs = list(
                                              list(targets = 0, visible = FALSE),
                                              list(targets = 1, width = '100px'),
                                              list(targets = 2:18, className = 'dt-center')
                                            ))) %>%
      formatStyle(c(1, 2), `border-left` = "solid 1px") %>%
      formatStyle(c(3, 7, 10, 12, 16, 18), `border-right` = "solid 1px")
  })
  
  
  
  # Blast Table --------------------------------------------------
  output$Blast_table = renderDataTable({
    table <- blast %>%
      unite("Name", First.Name:Last.Name, sep= " ") %>%
      filter(between(Date, input$DateRangeInput[1], input$DateRangeInput[2]),
             Name %in% msu_batters_wasi) %>%
      group_by(Name) %>%
      summarize(
        'Swings' = sum(Total.Swings),
        'Bat Speed' = round(weighted.mean(Bat.Speed..mph., Total.Swings),1),
        'Rot. Accel.' = round(weighted.mean(Rotational.Acceleration..g., Total.Swings),1),
        'On-Plane Eff.' = round(weighted.mean(On.Plane.Efficiency...., Total.Swings),0),
        'Vert. Bat Ang.' = round(weighted.mean(Vertical.Bat.Angle..deg., Total.Swings), 0),
        'Attack Ang.' = round(weighted.mean(Attack.Angle..deg., Total.Swings),0),
        'Early Conn.' = round(weighted.mean(Early.Connection..deg., Total.Swings),0),
        'Conn. @ Impact' = round(weighted.mean(Connection.at.Impact..deg., Total.Swings),0)) %>%
      arrange(desc(`Swings`))
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't',
                                            "pageLength" = 40,
                                            autoWidth = FALSE,
                                            columnDefs = list(
                                              list(targets = 0, visible = FALSE),
                                              list(targets = 1, width = '25'),
                                              list(targets = 2:9, width = '35'),
                                              list(targets = 2:9, className = 'dt-center')
                                            ))) %>%
      formatStyle(c(1, 2), `border-left` = "solid 1px") %>%
      formatStyle(c(2:9), `border-right` = "solid 1px") %>%
      formatStyle("Bat Speed",
                  Color = styleEqual(max(table$`Bat Speed`), 'orange'),
                  BackgroundColor = styleInterval(c(62, 70),
                                                  values = c(alpha('red', alpha = .25), 'white', alpha('green', alpha = .25)))) %>%
      formatStyle("Rot. Accel.",
                  Color = styleEqual(max(table$`Rot. Accel.`), 'orange')) %>%
      formatStyle("On-Plane Eff.",
                  Color = styleEqual(max(table$`On-Plane Eff.`), 'orange')) %>%
      formatStyle("Attack Ang.",
                  BackgroundColor = styleInterval(c(3, 14),
                                                  values = c(alpha('yellow', alpha = .25), 'white', alpha('yellow', alpha = .25))))
  })
  
  
  # Scrimmage Stats ------------------------------------------------------
  output$player_batting_stats = renderDataTable({
    table <- batting_scrimmage_stats %>%
      filter(Name != 'TOTAL:') %>%
      filter(!is.na(Name)) %>%
      rename(BA = AVG.,
             `2B` = X2B,
             `3B` = X3B,
             `CS/PO` = CS.PO) %>%
      select(Name, PA,AB,H,R,`2B`,`3B`,HR,RBI,BB,K,HBP,SB,`CS/PO`,TB,BA,OBP,SLG,OPS,SF,SH,E,SBA,PB) %>%
      filter(PA>0)%>%
      arrange(desc(PA))
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't', 
                                            "pageLength" = 40,
                                            autoWidth = FALSE,
                                            columnDefs = list(
                                              list(targets = 0, visible = FALSE),
                                              list(targets = 1, width = '100px'),
                                              list(targets = 2:24, className = 'dt-center')
                                            ))) %>%
      formatStyle(c(1, 2), `border-left` = "solid 1px") %>%
      formatStyle(c(3, 9, 12, 14, 19,24), `border-right` = "solid 1px") %>%
      formatStyle("BA", Color = styleEqual(max(table$`BA`, na.rm = TRUE), 'orange')) %>%
      formatStyle("OBP", Color = styleEqual(max(table$`OBP`, na.rm = TRUE), 'orange')) %>%
      formatStyle("SLG", Color = styleEqual(max(table$`SLG`, na.rm = TRUE), 'orange')) %>%
      formatStyle("OPS", Color = styleEqual(max(table$`OPS`, na.rm = TRUE), 'orange'))
    
  })
  
  output$team_batting_stats = renderDataTable({
    table <- batting_scrimmage_stats %>%
      filter(Name == 'TOTAL:') %>%
      rename(BA = AVG.,
             `2B` = X2B,
             `3B` = X3B,
             `CS/PO` = CS.PO) %>%
      select(Name, PA,AB,H,R,`2B`,`3B`,HR,RBI,BB,K,HBP,SB,`CS/PO`,TB,BA,OBP,SLG,OPS,SF,SH,E,SBA,PB) %>%
      arrange(desc(PA))
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't', 
                                            "pageLength" = 40,
                                            autoWidth = FALSE,
                                            columnDefs = list(
                                              list(targets = 0, visible = FALSE),
                                              list(targets = 1, width = '100px'),
                                              list(targets = 2:24, className = 'dt-center')
                                            ))) %>%
      formatStyle(c(1, 2), `border-left` = "solid 1px") %>%
      formatStyle(c(3, 9, 12, 14, 19,24), `border-right` = "solid 1px")
  })
  
  output$player_pitching_stats = renderDataTable({
    table <- pitching_scrimmage_stats %>%
      filter(NAME != 'TOTAL:') %>%
      rename(S = Strikes,
             B = Balls,
             `S%` = `Str...`,
             P = P.s,
             `1P-S` = X1pstr.,
             `1P-B` = X1pball,
             `1P-S%` = X1p.,
             `1Ps` = X1p.s) %>%
      filter(P>0)%>%
      relocate(IP, .after=NAME) %>%
      arrange(desc(IP))
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't', 
                                            "pageLength" = 40,
                                            autoWidth = FALSE,
                                            columnDefs = list(
                                              list(targets = 0, visible = FALSE),
                                              list(targets = 1, width = '100px'),
                                              list(targets = 2:24, className = 'dt-center')
                                            ))) %>%
      formatStyle(c(1, 2), `border-left` = "solid 1px") %>%
      formatStyle(c(3, 9, 13, 15, 19,24), `border-right` = "solid 1px")
    
  })
  
  output$team_pitching_stats = renderDataTable({
    table <- pitching_scrimmage_stats %>%
      filter(NAME == 'TOTAL:') %>%
      rename(S = Strikes,
             B = Balls,
             `S%` = `Str...`,
             P = P.s,
             `1P-S` = X1pstr.,
             `1P-B` = X1pball,
             `1P-S%` = X1p.,
             `1Ps` = X1p.s) %>%
      filter(P>0)%>%
      relocate(IP, .after=NAME)
    
    tableFilter <- reactive({
      table
    })
    datatable(tableFilter(), options = list(dom = 't', 
                                            "pageLength" = 40,
                                            autoWidth = FALSE,
                                            columnDefs = list(
                                              list(targets = 0, visible = FALSE),
                                              list(targets = 1, width = '100px'),
                                              list(targets = 2:24, className = 'dt-center')
                                            ))) %>%
      formatStyle(c(1, 2), `border-left` = "solid 1px") %>%
      formatStyle(c(3, 9, 13, 15, 19,24), `border-right` = "solid 1px")
    
  })
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  ###############################SD NEW###############################  ###Works####
  observeEvent(input$DateSelect, {
    sd_data <- sd_data %>% 
      filter(Date == input$DateSelect)
    
    observeEvent(input$Batters, {
      
      
      sd_data <- sd_data %>% 
        filter(Batter == input$Batters)
      
      
      #create strikezone graph
      graph <- sd_data %>% 
        ggplot(mapping = aes(x = -PlateLocSide, y = PlateLocHeight)) +
        geom_rect(aes(xmin = -3, xmax = 3, ymin = 0, ymax = 5, fill = "Waste"), alpha = .05, size = 1) +
        geom_rect(aes(xmin = -1.3193, xmax = 1.3193, ymin = 0.8875, ymax = 4.1125, fill = "Chase"), alpha = .05, size = 1) +
        geom_rect(aes(xmin = -0.8305, xmax = 0.8305, ymin = 1.3775, ymax = 3.6225, fill = "Shadow"), alpha = .05, size = 1) +
        geom_rect(aes(xmin = -0.7083, xmax = 0.7083, ymin = 1.5, ymax = 3.5), alpha = 0, size = 0.5, color = 'black', linetype='dashed') +
        geom_rect(aes(xmin = -0.5861, xmax = 0.5861, ymin = 1.6225, ymax = 3.3775, fill = "Zone"), alpha = .05, size = 1) +
        geom_rect(aes(xmin = -0.7083/2, xmax = 0.7083/2, ymin = 1.99, ymax = 3.01, fill = "Heart"), alpha = .05, size = 1) +
        # Home Plate:
        geom_segment(aes(x = -0.7083,y = 0.5,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
        geom_segment(aes(x = -0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
        geom_segment(aes(x = 0.7083,y = 0.3,xend = 0,yend = 0),size = 1,color = "black") +
        geom_segment(aes(x = 0.7083,y = 0.3,xend = 0.7083,yend = 0.5),size = 1,color = "black") +
        geom_segment(aes(x = -0.7083,y = 0.3,xend = -0.7083,yend = 0.5),size = 1,color = "black") +
        xlim(-3, 3) +
        ylim(0, 5) + 
        geom_point(aes(shape = Swing, color = Swing), size = 3) +
        scale_fill_manual(name = "Legend", values = c("Waste" = "deepskyblue3", "Chase" = "yellow", "Shadow" = "orange", "Zone" = "red", "Heart" = "darkred"),
                          breaks = c("Waste", "Chase", "Shadow", "Actual SZ", "Zone", 'Heart')) +
        scale_shape_manual(values = c(13, 16)) + 
        scale_color_manual(values = c("black", "black")) +
        theme_bw() + 
        theme(plot.title = element_text(size = 16,face = "bold",hjust = 0.5)) +
        theme(axis.title = element_blank())
      
      
      
      
      
      
      #output graph
      output$graph <- renderPlot({
        graph
      })
      
      #create score summary table
      score <- sd_data %>% 
        group_by(Batter) %>% 
        filter(Batter == input$Batters) %>% 
        summarise("Pitches" = n(),
                  "AVG" = sum(score) / n()
        )
      
      #create pitch by pitch overveiw for side panel UI
      overveiw <- sd_data %>% 
        filter(Batter == input$Batters) %>% 
        summarise(Count = Count,
                  Pitch = TaggedPitchType,
                  Swing = Swing,
                  Zone = zones,
                  Score = score,
                  Result = result,
                  outs_on_play = OutsOnPlay,
                  pitch_of_PA = PitchofPA,
                  outs = Outs,
                  poptime = PopTime)
      
      overveiw2 <- sd_data %>% 
        filter(Batter == input$Batters) %>% 
        summarise(Count = Count,
                  Pitch = TaggedPitchType,
                  Swing = Swing,
                  Zone = zones,
                  Score = score,
                  Result = result)
      
      overveiw2 <- data.frame(overveiw2)
      overveiw <- data.frame(overveiw)
      
      
      #get results for one player
      #fix steals with one out count as a result rn
      counts <- overveiw$Count[!is.na(overveiw$poptime) & overveiw$outs_on_play == 1 & overveiw$outs == 2 | !is.na(overveiw$poptime) & overveiw$outs_on_play == 2 & overveiw$outs == 1 | overveiw$Result == "Out" | overveiw$Result == "Swinging Strike" & substr(overveiw$Count, 3, 3) == "2" | overveiw$Result == "Looking Strike" & substr(overveiw$Count, 3, 3) == "2" | overveiw$Result == "Ball" & substr(overveiw$Count, 1, 1) == "3" | overveiw$Result == "Single" | overveiw$Result == "Double" | overveiw$Result == "Triple" | overveiw$Result == "Home Run" | overveiw$Result == "HBP" | overveiw$Result == "Error" | overveiw$Result == "Fielders Choice" | overveiw$Result == "Sacrifice"]
      results <- overveiw$Result[!is.na(overveiw$poptime) & overveiw$outs_on_play == 1  & overveiw$outs == 2 | !is.na(overveiw$poptime) & overveiw$outs_on_play == 2 & overveiw$outs == 1 | overveiw$Result == "Out" | overveiw$Result == "Swinging Strike" & substr(overveiw$Count, 3, 3) == "2" | overveiw$Result == "Looking Strike" & substr(overveiw$Count, 3, 3) == "2" | overveiw$Result == "Ball" & substr(overveiw$Count, 1, 1) == "3" | overveiw$Result == "Single" | overveiw$Result == "Double" | overveiw$Result == "Triple" | overveiw$Result == "Home Run" | overveiw$Result == "HBP" | overveiw$Result == "Error" | overveiw$Result == "Fielders Choice" | overveiw$Result == "Sacrifice"]
      results[results == "Ball" & substr(counts, 1, 1) != "3" | results == "Swinging Strike" & substr(counts, 3, 3) != "2"| results == "Looking Strike" & substr(counts, 3, 3) != "2"] <- "Base Runner"
      results[results == "Looking Strike" | results == "Swinging Strike"] <- "Strikeout"
      results[results == "Ball"] <- "Walk"
      
      
      #at bat summary for under graph
      if (nrow(overveiw) > 0) {
        atbat_number <- seq(1, length(overveiw$pitch_of_PA[overveiw$pitch_of_PA == 1]))
        atbats_list <- 1:length(overveiw$pitch_of_PA[overveiw$pitch_of_PA == 1])
        atbat_score <- 0
        pitches <- 0
        index <- 1
        
        for (i in 1:nrow(overveiw)) {
          atbat_score <- atbat_score + overveiw$Score[i]
          pitches <- pitches + 1
          
          if (i == nrow(overveiw)){
            atbats_list[index] <- atbat_score / pitches
          }
          
          else if (overveiw$pitch_of_PA[i+1] == 1){
            atbats_list[index] <- atbat_score / pitches
            index <- index + 1
            pitches <- 0
            atbat_score <- 0
          }
          
          
          
          
          
        }
        
        #check if atbats and scores and results line up so the app doesnt crash
        if (length(atbats_list) == length(results)){
          test <- data.frame('At Bat' = atbat_number,
                             "AVG" = atbats_list,
                             'Result' = results)
          
        }
        else{
          test <- data.frame('At Bat' = c(0),
                             "AVG" = c(0),
                             'Result' = c(0))
        }
        
      }
      else{
        test <- data.frame('At Bat' = c(0),
                           "AVG" = c(0),
                           'Result' = c(0))
      }
      
      
      
      
      #output score summary
      output$score <- renderTable(score)
      
      #output side panel overveiw
      output$overveiw <- renderTable(overveiw2)
      output$test <- renderTable(test)
      
      
    })
  })
  #Create scale tabel for side of graph
  level <- c("Elite", "Great", "Good", "Average", "Below Average", "Poor")
  scale_scores_national <- c('1.9', '1.1', '1.0', '.9', '.8', '.7')
  scale_scores_team <- c("1.4", "1.3", "1.1", ".9", ".8", ".7")
  
  scale <- data.frame(
    Level <- level,
    National <- scale_scores_national,
    Team <- scale_scores_team
    
  )
  names(scale) <- c("Level", "National", "Team")
  
  
  output$scale <- renderTable(scale)
  
}


###################################################

shinyApp(ui = ui, server = server)
